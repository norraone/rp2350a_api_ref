// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package glitchdetector provides access to the registers of the GLITCH_DETECTOR peripheral.
//
// Instances:
//
//	GLITCH_DETECTOR  GLITCH_DETECTOR_BASE  -  -  Glitch detector controls
//
// Registers:
//
//	0x000 32  ARM          Forcibly arm the glitch detectors, if they are not already armed by OTP. When armed, any individual detector trigger will cause a restart of the switched core power domain's power-on reset state machine. Glitch detector triggers are recorded accumulatively in TRIG_STATUS. If the system is reset by a glitch detector trigger, this is recorded in POWMAN_CHIP_RESET. This register is Secure read/write only.
//	0x004 32  DISARM
//	0x008 32  SENSITIVITY  Adjust the sensitivity of glitch detectors to values other than their OTP-provided defaults. This register is Secure read/write only.
//	0x00C 32  LOCK
//	0x010 32  TRIG_STATUS  Set when a detector output triggers. Write-1-clear. (May immediately return high if the detector remains in a failed state. Detectors can only be cleared by a full reset of the switched core power domain.) This register is Secure read/write only.
//	0x014 32  TRIG_FORCE   Simulate the firing of one or more detectors. Writing ones to this register will set the matching bits in STATUS_TRIG. If the glitch detectors are currently armed, writing ones will also immediately reset the switched core power domain, and set the reset reason latches in POWMAN_CHIP_RESET to indicate a glitch detector resets. This register is Secure read/write only.
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package glitchdetector

const (
	ARM ARM = 0xFFFF << 0 //+
	YES ARM = 0x00 << 0   //  Force the glitch detectors to be armed. (Any value other than ARM_NO counts as YES)
	NO  ARM = 0x5BAD << 0 //  Do not force the glitch detectors to be armed
)

const (
	ARMn = 0
)

const (
	DISARM DISARM = 0xFFFF << 0 //+ Forcibly disarm the glitch detectors, if they are armed by OTP. Ignored if ARM is YES. This register is Secure read/write only.
	NO     DISARM = 0x00 << 0   //  Do not disarm the glitch detectors. (Any value other than DISARM_YES counts as NO)
	YES    DISARM = 0xDCAF << 0 //  Disarm the glitch detectors
)

const (
	DISARMn = 0
)

const (
	DET0     SENSITIVITY = 0x03 << 0  //+ Set sensitivity for detector 0. Higher values are more sensitive.
	DET1     SENSITIVITY = 0x03 << 2  //+ Set sensitivity for detector 1. Higher values are more sensitive.
	DET2     SENSITIVITY = 0x03 << 4  //+ Set sensitivity for detector 2. Higher values are more sensitive.
	DET3     SENSITIVITY = 0x03 << 6  //+ Set sensitivity for detector 3. Higher values are more sensitive.
	DET0_INV SENSITIVITY = 0x03 << 8  //+ Must be the inverse of DET0, else the default value is used.
	DET1_INV SENSITIVITY = 0x03 << 10 //+ Must be the inverse of DET1, else the default value is used.
	DET2_INV SENSITIVITY = 0x03 << 12 //+ Must be the inverse of DET2, else the default value is used.
	DET3_INV SENSITIVITY = 0x03 << 14 //+ Must be the inverse of DET3, else the default value is used.
	DEFAULT  SENSITIVITY = 0xFF << 24 //+
	YES      SENSITIVITY = 0x00 << 24 //  Use the default sensitivity configured in OTP for all detectors. (Any value other than DEFAULT_NO counts as YES)
	NO       SENSITIVITY = 0xDE << 24 //  Do not use the default sensitivity configured in OTP. Instead use the value from this register.
)

const (
	DET0n     = 0
	DET1n     = 2
	DET2n     = 4
	DET3n     = 6
	DET0_INVn = 8
	DET1_INVn = 10
	DET2_INVn = 12
	DET3_INVn = 14
	DEFAULTn  = 24
)

const (
	DET0 TRIG_STATUS = 0x01 << 0 //+
	DET1 TRIG_STATUS = 0x01 << 1 //+
	DET2 TRIG_STATUS = 0x01 << 2 //+
	DET3 TRIG_STATUS = 0x01 << 3 //+
)

const (
	DET0n = 0
	DET1n = 1
	DET2n = 2
	DET3n = 3
)
