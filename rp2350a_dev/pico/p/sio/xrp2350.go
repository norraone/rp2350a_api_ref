// Code generated by xgen -g; DO NOT EDIT.

//go:build rp2350

package sio

import (
	"embedded/mmio"
	"structs"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	_ structs.HostLayout

	CPUID               mmio.R32[uint32]
	GPIO_IN             mmio.R32[uint32]
	GPIO_HI_IN          mmio.R32[uint32]
	_                   uint32
	GPIO_OUT            mmio.R32[uint32]
	GPIO_HI_OUT         mmio.R32[uint32]
	GPIO_OUT_SET        mmio.R32[uint32]
	GPIO_HI_OUT_SET     mmio.R32[uint32]
	GPIO_OUT_CLR        mmio.R32[uint32]
	GPIO_HI_OUT_CLR     mmio.R32[uint32]
	GPIO_OUT_XOR        mmio.R32[uint32]
	GPIO_HI_OUT_XOR     mmio.R32[uint32]
	GPIO_OE             mmio.R32[uint32]
	GPIO_HI_OE          mmio.R32[uint32]
	GPIO_OE_SET         mmio.R32[uint32]
	GPIO_HI_OE_SET      mmio.R32[uint32]
	GPIO_OE_CLR         mmio.R32[uint32]
	GPIO_HI_OE_CLR      mmio.R32[uint32]
	GPIO_OE_XOR         mmio.R32[uint32]
	GPIO_HI_OE_XOR      mmio.R32[uint32]
	FIFO_ST             mmio.R32[FIFO_ST]
	FIFO_WR             mmio.R32[uint32]
	FIFO_RD             mmio.R32[uint32]
	SPINLOCK_ST         mmio.R32[uint32]
	_                   [8]uint32
	INTERP0_ACCUM0      mmio.R32[uint32]
	INTERP0_ACCUM1      mmio.R32[uint32]
	INTERP0_BASE0       mmio.R32[uint32]
	INTERP0_BASE1       mmio.R32[uint32]
	INTERP0_BASE2       mmio.R32[uint32]
	INTERP0_POP_LANE0   mmio.R32[uint32]
	INTERP0_POP_LANE1   mmio.R32[uint32]
	INTERP0_POP_FULL    mmio.R32[uint32]
	INTERP0_PEEK_LANE0  mmio.R32[uint32]
	INTERP0_PEEK_LANE1  mmio.R32[uint32]
	INTERP0_PEEK_FULL   mmio.R32[uint32]
	INTERP0_CTRL_LANE0  mmio.R32[CTRL_LANE]
	INTERP0_CTRL_LANE1  mmio.R32[CTRL_LANE]
	INTERP0_ACCUM0_ADD  mmio.R32[uint32]
	INTERP0_ACCUM1_ADD  mmio.R32[uint32]
	INTERP0_BASE_1AND0  mmio.R32[uint32]
	INTERP1_ACCUM0      mmio.R32[uint32]
	INTERP1_ACCUM1      mmio.R32[uint32]
	INTERP1_BASE0       mmio.R32[uint32]
	INTERP1_BASE1       mmio.R32[uint32]
	INTERP1_BASE2       mmio.R32[uint32]
	INTERP1_POP_LANE0   mmio.R32[uint32]
	INTERP1_POP_LANE1   mmio.R32[uint32]
	INTERP1_POP_FULL    mmio.R32[uint32]
	INTERP1_PEEK_LANE0  mmio.R32[uint32]
	INTERP1_PEEK_LANE1  mmio.R32[uint32]
	INTERP1_PEEK_FULL   mmio.R32[uint32]
	INTERP1_CTRL_LANE0  mmio.R32[CTRL_LANE]
	INTERP1_CTRL_LANE1  mmio.R32[CTRL_LANE]
	INTERP1_ACCUM0_ADD  mmio.R32[uint32]
	INTERP1_ACCUM1_ADD  mmio.R32[uint32]
	INTERP1_BASE_1AND0  mmio.R32[uint32]
	SPINLOCK0           [32]mmio.R32[uint32]
	DOORBELL_OUT_SET    mmio.R32[uint32]
	DOORBELL_OUT_CLR    mmio.R32[uint32]
	DOORBELL_IN_SET     mmio.R32[uint32]
	DOORBELL_IN_CLR     mmio.R32[uint32]
	PERI_NONSEC         mmio.R32[PERI_NONSEC]
	_                   [3]uint32
	RISCV_SOFTIRQ       mmio.R32[RISCV_SOFTIRQ]
	MTIME_CTRL          mmio.R32[MTIME_CTRL]
	_                   [2]uint32
	MTIME               mmio.R32[uint32]
	MTIMEH              mmio.R32[uint32]
	MTIMECMP            mmio.R32[uint32]
	MTIMECMPH           mmio.R32[uint32]
	TMDS_CTRL           mmio.R32[TMDS_CTRL]
	TMDS_WDATA          mmio.R32[uint32]
	TMDS_PEEK_SINGLE    mmio.R32[uint32]
	TMDS_POP_SINGLE     mmio.R32[uint32]
	TMDS_PEEK_DOUBLE_L0 mmio.R32[uint32]
	TMDS_POP_DOUBLE_L0  mmio.R32[uint32]
	TMDS_PEEK_DOUBLE_L1 mmio.R32[uint32]
	TMDS_POP_DOUBLE_L1  mmio.R32[uint32]
	TMDS_PEEK_DOUBLE_L2 mmio.R32[uint32]
	TMDS_POP_DOUBLE_L2  mmio.R32[uint32]
}

func SIO() *Periph    { return (*Periph)(unsafe.Pointer(uintptr(mmap.SIO_BASE))) }
func SIO_NS() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SIO_NS_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type FIFO_ST uint32

func VLD_(p *Periph) mmio.RM32[FIFO_ST] { return mmio.RM32[FIFO_ST]{R: &p.FIFO_ST, Mask: VLD} }
func RDY_(p *Periph) mmio.RM32[FIFO_ST] { return mmio.RM32[FIFO_ST]{R: &p.FIFO_ST, Mask: RDY} }
func WOF_(p *Periph) mmio.RM32[FIFO_ST] { return mmio.RM32[FIFO_ST]{R: &p.FIFO_ST, Mask: WOF} }
func ROE_(p *Periph) mmio.RM32[FIFO_ST] { return mmio.RM32[FIFO_ST]{R: &p.FIFO_ST, Mask: ROE} }

type CTRL_LANE uint32

type PERI_NONSEC uint32

func INTERP0_(p *Periph) mmio.RM32[PERI_NONSEC] {
	return mmio.RM32[PERI_NONSEC]{R: &p.PERI_NONSEC, Mask: INTERP0}
}
func INTERP1_(p *Periph) mmio.RM32[PERI_NONSEC] {
	return mmio.RM32[PERI_NONSEC]{R: &p.PERI_NONSEC, Mask: INTERP1}
}
func TMDS_(p *Periph) mmio.RM32[PERI_NONSEC] {
	return mmio.RM32[PERI_NONSEC]{R: &p.PERI_NONSEC, Mask: TMDS}
}

type RISCV_SOFTIRQ uint32

func CORE0_SET_(p *Periph) mmio.RM32[RISCV_SOFTIRQ] {
	return mmio.RM32[RISCV_SOFTIRQ]{R: &p.RISCV_SOFTIRQ, Mask: CORE0_SET}
}
func CORE1_SET_(p *Periph) mmio.RM32[RISCV_SOFTIRQ] {
	return mmio.RM32[RISCV_SOFTIRQ]{R: &p.RISCV_SOFTIRQ, Mask: CORE1_SET}
}
func CORE0_CLR_(p *Periph) mmio.RM32[RISCV_SOFTIRQ] {
	return mmio.RM32[RISCV_SOFTIRQ]{R: &p.RISCV_SOFTIRQ, Mask: CORE0_CLR}
}
func CORE1_CLR_(p *Periph) mmio.RM32[RISCV_SOFTIRQ] {
	return mmio.RM32[RISCV_SOFTIRQ]{R: &p.RISCV_SOFTIRQ, Mask: CORE1_CLR}
}

type MTIME_CTRL uint32

func EN_(p *Periph) mmio.RM32[MTIME_CTRL] { return mmio.RM32[MTIME_CTRL]{R: &p.MTIME_CTRL, Mask: EN} }
func FULLSPEED_(p *Periph) mmio.RM32[MTIME_CTRL] {
	return mmio.RM32[MTIME_CTRL]{R: &p.MTIME_CTRL, Mask: FULLSPEED}
}
func DBGPAUSE_CORE0_(p *Periph) mmio.RM32[MTIME_CTRL] {
	return mmio.RM32[MTIME_CTRL]{R: &p.MTIME_CTRL, Mask: DBGPAUSE_CORE0}
}
func DBGPAUSE_CORE1_(p *Periph) mmio.RM32[MTIME_CTRL] {
	return mmio.RM32[MTIME_CTRL]{R: &p.MTIME_CTRL, Mask: DBGPAUSE_CORE1}
}

type TMDS_CTRL uint32

func L0_ROT_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L0_ROT}
}
func L1_ROT_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L1_ROT}
}
func L2_ROT_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L2_ROT}
}
func L0_NBITS_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L0_NBITS}
}
func L1_NBITS_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L1_NBITS}
}
func L2_NBITS_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: L2_NBITS}
}
func INTERLEAVE_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: INTERLEAVE}
}
func PIX_SHIFT_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: PIX_SHIFT}
}
func PIX2_NOSHIFT_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: PIX2_NOSHIFT}
}
func CLEAR_BALANCE_(p *Periph) mmio.RM32[TMDS_CTRL] {
	return mmio.RM32[TMDS_CTRL]{R: &p.TMDS_CTRL, Mask: CLEAR_BALANCE}
}
