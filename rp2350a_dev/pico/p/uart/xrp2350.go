// Code generated by xgen -g; DO NOT EDIT.

//go:build rp2350

package uart

import (
	"embedded/mmio"
	"structs"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	_ structs.HostLayout

	DR        mmio.R32[uint32]
	RSR       mmio.R32[RSR]
	_         [4]uint32
	FR        mmio.R32[FR]
	_         uint32
	ILPR      mmio.R32[uint32]
	IBRD      mmio.R32[uint32]
	FBRD      mmio.R32[uint32]
	LCR_H     mmio.R32[LCR_H]
	CR        mmio.R32[CR]
	IFLS      mmio.R32[IFLS]
	IMSC      mmio.R32[INT]
	RIS       mmio.R32[INT]
	MIS       mmio.R32[INT]
	ICR       mmio.R32[INT]
	DMACR     mmio.R32[DMACR]
	_         [997]uint32
	PERIPHID0 mmio.R32[uint32]
	PERIPHID1 mmio.R32[PERIPHID1]
	PERIPHID2 mmio.R32[PERIPHID2]
	PERIPHID3 mmio.R32[uint32]
	PCELLID0  mmio.R32[uint32]
	PCELLID1  mmio.R32[uint32]
	PCELLID2  mmio.R32[uint32]
	PCELLID3  mmio.R32[uint32]
}

func UART0() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UART0_BASE))) }
func UART1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UART1_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type RSR uint32

func FE_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: FE} }
func PE_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: PE} }
func BE_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: BE} }
func OE_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: OE} }

type FR uint32

func CTS_(p *Periph) mmio.RM32[FR]  { return mmio.RM32[FR]{R: &p.FR, Mask: CTS} }
func DSR_(p *Periph) mmio.RM32[FR]  { return mmio.RM32[FR]{R: &p.FR, Mask: DSR} }
func DCD_(p *Periph) mmio.RM32[FR]  { return mmio.RM32[FR]{R: &p.FR, Mask: DCD} }
func BUSY_(p *Periph) mmio.RM32[FR] { return mmio.RM32[FR]{R: &p.FR, Mask: BUSY} }
func RXFE_(p *Periph) mmio.RM32[FR] { return mmio.RM32[FR]{R: &p.FR, Mask: RXFE} }
func TXFF_(p *Periph) mmio.RM32[FR] { return mmio.RM32[FR]{R: &p.FR, Mask: TXFF} }
func RXFF_(p *Periph) mmio.RM32[FR] { return mmio.RM32[FR]{R: &p.FR, Mask: RXFF} }
func TXFE_(p *Periph) mmio.RM32[FR] { return mmio.RM32[FR]{R: &p.FR, Mask: TXFE} }
func RI_(p *Periph) mmio.RM32[FR]   { return mmio.RM32[FR]{R: &p.FR, Mask: RI} }

type LCR_H uint32

func BRK_(p *Periph) mmio.RM32[LCR_H]  { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: BRK} }
func PEN_(p *Periph) mmio.RM32[LCR_H]  { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: PEN} }
func EPS_(p *Periph) mmio.RM32[LCR_H]  { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: EPS} }
func STP2_(p *Periph) mmio.RM32[LCR_H] { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: STP2} }
func FEN_(p *Periph) mmio.RM32[LCR_H]  { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: FEN} }
func WLEN_(p *Periph) mmio.RM32[LCR_H] { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: WLEN} }
func SPS_(p *Periph) mmio.RM32[LCR_H]  { return mmio.RM32[LCR_H]{R: &p.LCR_H, Mask: SPS} }

type CR uint32

func UARTEN_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: UARTEN} }
func SIREN_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: SIREN} }
func SIRLP_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: SIRLP} }
func LBE_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: LBE} }
func TXE_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: TXE} }
func RXE_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: RXE} }
func DTR_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: DTR} }
func RTS_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: RTS} }
func OUT1_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: OUT1} }
func OUT2_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: OUT2} }
func RTSEN_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: RTSEN} }
func CTSEN_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: CTSEN} }

type IFLS uint32

func TXIFLSEL_(p *Periph) mmio.RM32[IFLS] { return mmio.RM32[IFLS]{R: &p.IFLS, Mask: TXIFLSEL} }
func RXIFLSEL_(p *Periph) mmio.RM32[IFLS] { return mmio.RM32[IFLS]{R: &p.IFLS, Mask: RXIFLSEL} }

type INT uint32

type DMACR uint32

func RXDMAE_(p *Periph) mmio.RM32[DMACR]   { return mmio.RM32[DMACR]{R: &p.DMACR, Mask: RXDMAE} }
func TXDMAE_(p *Periph) mmio.RM32[DMACR]   { return mmio.RM32[DMACR]{R: &p.DMACR, Mask: TXDMAE} }
func DMAONERR_(p *Periph) mmio.RM32[DMACR] { return mmio.RM32[DMACR]{R: &p.DMACR, Mask: DMAONERR} }

type PERIPHID1 uint32

func PARTNUMBER1_(p *Periph) mmio.RM32[PERIPHID1] {
	return mmio.RM32[PERIPHID1]{R: &p.PERIPHID1, Mask: PARTNUMBER1}
}
func DESIGNER0_(p *Periph) mmio.RM32[PERIPHID1] {
	return mmio.RM32[PERIPHID1]{R: &p.PERIPHID1, Mask: DESIGNER0}
}

type PERIPHID2 uint32

func DESIGNER1_(p *Periph) mmio.RM32[PERIPHID2] {
	return mmio.RM32[PERIPHID2]{R: &p.PERIPHID2, Mask: DESIGNER1}
}
func REVISION_(p *Periph) mmio.RM32[PERIPHID2] {
	return mmio.RM32[PERIPHID2]{R: &p.PERIPHID2, Mask: REVISION}
}
