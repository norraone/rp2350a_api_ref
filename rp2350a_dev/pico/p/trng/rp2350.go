// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package trng provides access to the registers of the TRNG peripheral.
//
// Instances:
//
//	TRNG  TRNG_BASE  -  TRNG  ARM TrustZone RNG register block
//
// Registers:
//
//	0x100 32  RNG_IMR             Interrupt masking.
//	0x104 32  RNG_ISR             RNG status register. If corresponding RNG_IMR bit is unmasked, an interrupt will be generated.
//	0x108 32  RNG_ICR             Interrupt/status bit clear Register.
//	0x10C 32  TRNG_CONFIG         Selecting the inverter-chain length.
//	0x110 32  TRNG_VALID          192 bit collection indication.
//	0x114 32  EHR_DATA0           RNG collected bits.
//	0x118 32  EHR_DATA1           RNG collected bits.
//	0x11C 32  EHR_DATA2           RNG collected bits.
//	0x120 32  EHR_DATA3           RNG collected bits.
//	0x124 32  EHR_DATA4           RNG collected bits.
//	0x128 32  EHR_DATA5           RNG collected bits.
//	0x12C 32  RND_SOURCE_ENABLE   Enable signal for the random source.
//	0x130 32  SAMPLE_CNT1         Counts clocks between sampling of random bit.
//	0x134 32  AUTOCORR_STATISTIC  Statistic about Autocorrelation test activations.
//	0x138 32  TRNG_DEBUG_CONTROL  Debug register.
//	0x140 32  TRNG_SW_RESET       Generate internal SW reset within the RNG block.
//	0x1B4 32  RNG_DEBUG_EN_INPUT  Enable the RNG debug mode
//	0x1B8 32  TRNG_BUSY           RNG Busy indication.
//	0x1BC 32  RST_BITS_COUNTER    Reset the counter of collected bits in the RNG.
//	0x1C0 32  RNG_VERSION         Displays the version settings of the TRNG.
//	0x1E0 32  RNG_BIST_CNTR_0     Collected BIST results.
//	0x1E4 32  RNG_BIST_CNTR_1     Collected BIST results.
//	0x1E8 32  RNG_BIST_CNTR_2     Collected BIST results.
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package trng

const (
	EHR_VALID_INT_MASK    RNG_IMR = 0x01 << 0      //+ 1'b1-mask interrupt, no interrupt will be generated. See RNG_ISR for an explanation on this interrupt.
	AUTOCORR_ERR_INT_MASK RNG_IMR = 0x01 << 1      //+ 1'b1-mask interrupt, no interrupt will be generated. See RNG_ISR for an explanation on this interrupt.
	CRNGT_ERR_INT_MASK    RNG_IMR = 0x01 << 2      //+ 1'b1-mask interrupt, no interrupt will be generated. See RNG_ISR for an explanation on this interrupt.
	VN_ERR_INT_MASK       RNG_IMR = 0x01 << 3      //+ 1'b1-mask interrupt, no interrupt will be generated. See RNG_ISR for an explanation on this interrupt.
	RESERVED              RNG_IMR = 0xFFFFFFF << 4 //+ RESERVED
)

const (
	EHR_VALID_INT_MASKn    = 0
	AUTOCORR_ERR_INT_MASKn = 1
	CRNGT_ERR_INT_MASKn    = 2
	VN_ERR_INT_MASKn       = 3
	RESERVEDn              = 4
)

const (
	EHR_VALID    RNG_ISR = 0x01 << 0      //+ 1'b1 indicates that 192 bits have been collected in the RNG, and are ready to be read.
	AUTOCORR_ERR RNG_ISR = 0x01 << 1      //+ 1'b1 indicates Autocorrelation test failed four times in a row. When set, RNG cease from functioning until next reset.
	CRNGT_ERR    RNG_ISR = 0x01 << 2      //+ 1'b1 indicates CRNGT in the RNG test failed. Failure occurs when two consecutive blocks of 16 collected bits are equal.
	VN_ERR       RNG_ISR = 0x01 << 3      //+ 1'b1 indicates Von Neuman error. Error in von Neuman occurs if 32 consecutive collected bits are identical, ZERO or ONE.
	RESERVED     RNG_ISR = 0xFFFFFFF << 4 //+ RESERVED
)

const (
	EHR_VALIDn    = 0
	AUTOCORR_ERRn = 1
	CRNGT_ERRn    = 2
	VN_ERRn       = 3
	RESERVEDn     = 4
)

const (
	EHR_VALID    RNG_ICR = 0x01 << 0      //+ Write 1'b1 - clear corresponding bit in RNG_ISR.
	AUTOCORR_ERR RNG_ICR = 0x01 << 1      //+ Cannot be cleared by SW! Only RNG reset clears this bit.
	CRNGT_ERR    RNG_ICR = 0x01 << 2      //+ Write 1'b1 - clear corresponding bit in RNG_ISR.
	VN_ERR       RNG_ICR = 0x01 << 3      //+ Write 1'b1 - clear corresponding bit in RNG_ISR.
	RESERVED     RNG_ICR = 0xFFFFFFF << 4 //+ RESERVED
)

const (
	EHR_VALIDn    = 0
	AUTOCORR_ERRn = 1
	CRNGT_ERRn    = 2
	VN_ERRn       = 3
	RESERVEDn     = 4
)

const (
	RND_SRC_SEL TRNG_CONFIG = 0x03 << 0       //+ Selects the number of inverters (out of four possible selections) in the ring oscillator (the entropy source).
	RESERVED    TRNG_CONFIG = 0x3FFFFFFF << 2 //+ RESERVED
)

const (
	RND_SRC_SELn = 0
	RESERVEDn    = 2
)

const (
	EHR_VALID TRNG_VALID = 0x01 << 0       //+ 1'b1 indicates that collection of bits in the RNG is completed, and data can be read from EHR_DATA register.
	RESERVED  TRNG_VALID = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	EHR_VALIDn = 0
	RESERVEDn  = 1
)

const (
	RND_SRC_EN RND_SOURCE_ENABLE = 0x01 << 0       //+ * 1'b1 - entropy source is enabled. *1'b0 - entropy source is disabled
	RESERVED   RND_SOURCE_ENABLE = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	RND_SRC_ENn = 0
	RESERVEDn   = 1
)

const (
	AUTOCORR_TRYS  AUTOCORR_STATISTIC = 0x3FFF << 0 //+ Count each time an autocorrelation test starts. Any write to the register reset the counter. Stop collecting statistic if one of the counters reached the limit.
	AUTOCORR_FAILS AUTOCORR_STATISTIC = 0xFF << 14  //+ Count each time an autocorrelation test fails. Any write to the register reset the counter. Stop collecting statistic if one of the counters reached the limit.
	RESERVED       AUTOCORR_STATISTIC = 0x3FF << 22 //+ RESERVED
)

const (
	AUTOCORR_TRYSn  = 0
	AUTOCORR_FAILSn = 14
	RESERVEDn       = 22
)

const (
	RESERVED              TRNG_DEBUG_CONTROL = 0x01 << 0 //+ N/A
	VNC_BYPASS            TRNG_DEBUG_CONTROL = 0x01 << 1 //+ When set, the Von-Neuman balancer is bypassed (including the 32 consecutive bits test).
	TRNG_CRNGT_BYPASS     TRNG_DEBUG_CONTROL = 0x01 << 2 //+ When set, the CRNGT test in the RNG is bypassed.
	AUTO_CORRELATE_BYPASS TRNG_DEBUG_CONTROL = 0x01 << 3 //+ When set, the autocorrelation test in the TRNG module is bypassed.
)

const (
	RESERVEDn              = 0
	VNC_BYPASSn            = 1
	TRNG_CRNGT_BYPASSn     = 2
	AUTO_CORRELATE_BYPASSn = 3
)

const (
	TRNG_SW_RESET TRNG_SW_RESET = 0x01 << 0       //+ Writing 1'b1 to this register causes an internal RNG reset.
	RESERVED      TRNG_SW_RESET = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	TRNG_SW_RESETn = 0
	RESERVEDn      = 1
)

const (
	RNG_DEBUG_EN RNG_DEBUG_EN_INPUT = 0x01 << 0       //+ * 1'b1 - debug mode is enabled. *1'b0 - debug mode is disabled
	RESERVED     RNG_DEBUG_EN_INPUT = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	RNG_DEBUG_ENn = 0
	RESERVEDn     = 1
)

const (
	TRNG_BUSY TRNG_BUSY = 0x01 << 0       //+ Reflects rng_busy status.
	RESERVED  TRNG_BUSY = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	TRNG_BUSYn = 0
	RESERVEDn  = 1
)

const (
	RST_BITS_COUNTER RST_BITS_COUNTER = 0x01 << 0       //+ Writing any value to this address will reset the bits counter and RNG valid registers. RND_SORCE_ENABLE register must be unset in order for the reset to take place.
	RESERVED         RST_BITS_COUNTER = 0x7FFFFFFF << 1 //+ RESERVED
)

const (
	RST_BITS_COUNTERn = 0
	RESERVEDn         = 1
)

const (
	EHR_WIDTH_192        RNG_VERSION = 0x01 << 0     //+ * 1'b1 - 192-bit EHR. *1'b0 - 128-bit EHR
	CRNGT_EXISTS         RNG_VERSION = 0x01 << 1     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	AUTOCORR_EXISTS      RNG_VERSION = 0x01 << 2     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	TRNG_TESTS_BYPASS_EN RNG_VERSION = 0x01 << 3     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	PRNG_EXISTS          RNG_VERSION = 0x01 << 4     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	KAT_EXISTS           RNG_VERSION = 0x01 << 5     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	RESEEDING_EXISTS     RNG_VERSION = 0x01 << 6     //+ * 1'b1 - Exists. *1'b0 - Does not exist
	RNG_USE_5_SBOXES     RNG_VERSION = 0x01 << 7     //+ * 1'b1 - 5 SBOX AES. *1'b0 - 20 SBOX AES
	RESERVED             RNG_VERSION = 0xFFFFFF << 8 //+ RESERVED
)

const (
	EHR_WIDTH_192n        = 0
	CRNGT_EXISTSn         = 1
	AUTOCORR_EXISTSn      = 2
	TRNG_TESTS_BYPASS_ENn = 3
	PRNG_EXISTSn          = 4
	KAT_EXISTSn           = 5
	RESEEDING_EXISTSn     = 6
	RNG_USE_5_SBOXESn     = 7
	RESERVEDn             = 8
)

const (
	ROSC_CNTR_VAL RNG_BIST_CNTR_0 = 0x3FFFFF << 0 //+ Reflects the results of RNG BIST counter.
	RESERVED      RNG_BIST_CNTR_0 = 0x3FF << 22   //+ RESERVED
)

const (
	ROSC_CNTR_VALn = 0
	RESERVEDn      = 22
)

const (
	ROSC_CNTR_VAL RNG_BIST_CNTR_1 = 0x3FFFFF << 0 //+ Reflects the results of RNG BIST counter.
	RESERVED      RNG_BIST_CNTR_1 = 0x3FF << 22   //+ RESERVED
)

const (
	ROSC_CNTR_VALn = 0
	RESERVEDn      = 22
)

const (
	ROSC_CNTR_VAL RNG_BIST_CNTR_2 = 0x3FFFFF << 0 //+ Reflects the results of RNG BIST counter.
	RESERVED      RNG_BIST_CNTR_2 = 0x3FF << 22   //+ RESERVED
)

const (
	ROSC_CNTR_VALn = 0
	RESERVEDn      = 22
)
