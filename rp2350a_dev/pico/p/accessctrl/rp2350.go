// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package accessctrl provides access to the registers of the ACCESSCTRL peripheral.
//
// Instances:
//
//	ACCESSCTRL  ACCESSCTRL_BASE  -  -  Hardware access control registers
//
// Registers:
//
//	0x000 32  LOCK              Once a LOCK bit is written to 1, ACCESSCTRL silently ignores writes from that master. LOCK is writable only by a Secure, Privileged processor or debugger. LOCK bits are only writable when their value is zero. Once set, they can never be cleared, except by a full reset of ACCESSCTRL Setting the LOCK bit does not affect whether an access raises a bus error. Unprivileged writes, or writes from the DMA, will continue to raise bus errors. All other accesses will continue not to.
//	0x004 32  FORCE_CORE_NS     Force core 1's bus accesses to always be Non-secure, no matter the core's internal state. Useful for schemes where one core is designated as the Non-secure core, since some peripherals may filter individual registers internally based on security state but not on master ID.
//	0x008 32  CFGRESET          Write 1 to reset all ACCESSCTRL configuration, except for the LOCK and FORCE_CORE_NS registers. This bit is used in the RP2350 bootrom to quickly restore ACCESSCTRL to a known state during the boot path. Note that, like all registers in ACCESSCTRL, this register is not writable when the writer's corresponding LOCK bit is set, therefore a master which has been locked out of ACCESSCTRL can not use the CFGRESET register to disturb its contents.
//	0x00C 32  GPIO_NSMASK0      Control whether GPIO0...31 are accessible to Non-secure code. Writable only by a Secure, Privileged processor or debugger. 0 -> Secure access only 1 -> Secure + Non-secure access
//	0x010 32  GPIO_NSMASK1      Control whether GPIO32..47 are accessible to Non-secure code, and whether QSPI and USB bitbang are accessible through the Non-secure SIO. Writable only by a Secure, Privileged processor or debugger.
//	0x014 32  ROM               Control whether debugger, DMA, core 0 and core 1 can access ROM, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x018 32  XIP_MAIN          Control whether debugger, DMA, core 0 and core 1 can access XIP_MAIN, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x01C 32  SRAM0             Control whether debugger, DMA, core 0 and core 1 can access SRAM0, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x020 32  SRAM1             Control whether debugger, DMA, core 0 and core 1 can access SRAM1, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x024 32  SRAM2             Control whether debugger, DMA, core 0 and core 1 can access SRAM2, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x028 32  SRAM3             Control whether debugger, DMA, core 0 and core 1 can access SRAM3, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x02C 32  SRAM4             Control whether debugger, DMA, core 0 and core 1 can access SRAM4, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x030 32  SRAM5             Control whether debugger, DMA, core 0 and core 1 can access SRAM5, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x034 32  SRAM6             Control whether debugger, DMA, core 0 and core 1 can access SRAM6, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x038 32  SRAM7             Control whether debugger, DMA, core 0 and core 1 can access SRAM7, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x03C 32  SRAM8             Control whether debugger, DMA, core 0 and core 1 can access SRAM8, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x040 32  SRAM9             Control whether debugger, DMA, core 0 and core 1 can access SRAM9, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x044 32  DMA               Control whether debugger, DMA, core 0 and core 1 can access DMA, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x048 32  USBCTRL           Control whether debugger, DMA, core 0 and core 1 can access USBCTRL, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x04C 32  PIO0              Control whether debugger, DMA, core 0 and core 1 can access PIO0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x050 32  PIO1              Control whether debugger, DMA, core 0 and core 1 can access PIO1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x054 32  PIO2              Control whether debugger, DMA, core 0 and core 1 can access PIO2, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x058 32  CORESIGHT_TRACE   Control whether debugger, DMA, core 0 and core 1 can access CORESIGHT_TRACE, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x05C 32  CORESIGHT_PERIPH  Control whether debugger, DMA, core 0 and core 1 can access CORESIGHT_PERIPH, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x060 32  SYSINFO           Control whether debugger, DMA, core 0 and core 1 can access SYSINFO, and at what security/privilege levels they can do so. Defaults to fully open access. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x064 32  RESETS            Control whether debugger, DMA, core 0 and core 1 can access RESETS, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x068 32  IO_BANK0          Control whether debugger, DMA, core 0 and core 1 can access IO_BANK0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x06C 32  IO_BANK1          Control whether debugger, DMA, core 0 and core 1 can access IO_BANK1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x070 32  PADS_BANK0        Control whether debugger, DMA, core 0 and core 1 can access PADS_BANK0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x074 32  PADS_QSPI         Control whether debugger, DMA, core 0 and core 1 can access PADS_QSPI, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x078 32  BUSCTRL           Control whether debugger, DMA, core 0 and core 1 can access BUSCTRL, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x07C 32  ADC0              Control whether debugger, DMA, core 0 and core 1 can access ADC0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x080 32  HSTX              Control whether debugger, DMA, core 0 and core 1 can access HSTX, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x084 32  I2C0              Control whether debugger, DMA, core 0 and core 1 can access I2C0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x088 32  I2C1              Control whether debugger, DMA, core 0 and core 1 can access I2C1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x08C 32  PWM               Control whether debugger, DMA, core 0 and core 1 can access PWM, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x090 32  SPI0              Control whether debugger, DMA, core 0 and core 1 can access SPI0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x094 32  SPI1              Control whether debugger, DMA, core 0 and core 1 can access SPI1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x098 32  TIMER0            Control whether debugger, DMA, core 0 and core 1 can access TIMER0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x09C 32  TIMER1            Control whether debugger, DMA, core 0 and core 1 can access TIMER1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0A0 32  UART0             Control whether debugger, DMA, core 0 and core 1 can access UART0, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0A4 32  UART1             Control whether debugger, DMA, core 0 and core 1 can access UART1, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0A8 32  OTP               Control whether debugger, DMA, core 0 and core 1 can access OTP, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0AC 32  TBMAN             Control whether debugger, DMA, core 0 and core 1 can access TBMAN, and at what security/privilege levels they can do so. Defaults to Secure access from any master. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0B0 32  POWMAN            Control whether debugger, DMA, core 0 and core 1 can access POWMAN, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0B4 32  TRNG              Control whether debugger, DMA, core 0 and core 1 can access TRNG, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0B8 32  SHA256            Control whether debugger, DMA, core 0 and core 1 can access SHA256, and at what security/privilege levels they can do so. Defaults to Secure, Privileged access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0BC 32  SYSCFG            Control whether debugger, DMA, core 0 and core 1 can access SYSCFG, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0C0 32  CLOCKS            Control whether debugger, DMA, core 0 and core 1 can access CLOCKS, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0C4 32  XOSC              Control whether debugger, DMA, core 0 and core 1 can access XOSC, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0C8 32  ROSC              Control whether debugger, DMA, core 0 and core 1 can access ROSC, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0CC 32  PLL_SYS           Control whether debugger, DMA, core 0 and core 1 can access PLL_SYS, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0D0 32  PLL_USB           Control whether debugger, DMA, core 0 and core 1 can access PLL_USB, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0D4 32  TICKS             Control whether debugger, DMA, core 0 and core 1 can access TICKS, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0D8 32  WATCHDOG          Control whether debugger, DMA, core 0 and core 1 can access WATCHDOG, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0DC 32  RSM               Control whether debugger, DMA, core 0 and core 1 can access RSM, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0E0 32  XIP_CTRL          Control whether debugger, DMA, core 0 and core 1 can access XIP_CTRL, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0E4 32  XIP_QMI           Control whether debugger, DMA, core 0 and core 1 can access XIP_QMI, and at what security/privilege levels they can do so. Defaults to Secure, Privileged processor or debug access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//	0x0E8 32  XIP_AUX           Control whether debugger, DMA, core 0 and core 1 can access XIP_AUX, and at what security/privilege levels they can do so. Defaults to Secure, Privileged access only. This register is writable only from a Secure, Privileged processor or debugger, with the exception of the NSU bit, which becomes Non-secure-Privileged-writable when the NSP bit is set.
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package accessctrl

const (
	CORE0 LOCK = 0x01 << 0 //+
	CORE1 LOCK = 0x01 << 1 //+
	DMA   LOCK = 0x01 << 2 //+
	DEBUG LOCK = 0x01 << 3 //+
)

const (
	CORE0n = 0
	CORE1n = 1
	DMAn   = 2
	DEBUGn = 3
)

const (
	CORE1 FORCE_CORE_NS = 0x01 << 1 //+
)

const (
	CORE1n = 1
)

const (
	GPIO     GPIO_NSMASK1 = 0xFFFF << 0 //+
	USB_DP   GPIO_NSMASK1 = 0x01 << 24  //+
	USB_DM   GPIO_NSMASK1 = 0x01 << 25  //+
	QSPI_SCK GPIO_NSMASK1 = 0x01 << 26  //+
	QSPI_CSN GPIO_NSMASK1 = 0x01 << 27  //+
	QSPI_SD  GPIO_NSMASK1 = 0x0F << 28  //+
)

const (
	GPIOn     = 0
	USB_DPn   = 24
	USB_DMn   = 25
	QSPI_SCKn = 26
	QSPI_CSNn = 27
	QSPI_SDn  = 28
)

const (
	NSU   ROM = 0x01 << 0 //+ If 1, and NSP is also set, ROM can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   ROM = 0x01 << 1 //+ If 1, ROM can be accessed from a Non-secure, Privileged context.
	SU    ROM = 0x01 << 2 //+ If 1, and SP is also set, ROM can be accessed from a Secure, Unprivileged context.
	SP    ROM = 0x01 << 3 //+ If 1, ROM can be accessed from a Secure, Privileged context.
	CORE0 ROM = 0x01 << 4 //+ If 1, ROM can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 ROM = 0x01 << 5 //+ If 1, ROM can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   ROM = 0x01 << 6 //+ If 1, ROM can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   ROM = 0x01 << 7 //+ If 1, ROM can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   XIP_MAIN = 0x01 << 0 //+ If 1, and NSP is also set, XIP_MAIN can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   XIP_MAIN = 0x01 << 1 //+ If 1, XIP_MAIN can be accessed from a Non-secure, Privileged context.
	SU    XIP_MAIN = 0x01 << 2 //+ If 1, and SP is also set, XIP_MAIN can be accessed from a Secure, Unprivileged context.
	SP    XIP_MAIN = 0x01 << 3 //+ If 1, XIP_MAIN can be accessed from a Secure, Privileged context.
	CORE0 XIP_MAIN = 0x01 << 4 //+ If 1, XIP_MAIN can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 XIP_MAIN = 0x01 << 5 //+ If 1, XIP_MAIN can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   XIP_MAIN = 0x01 << 6 //+ If 1, XIP_MAIN can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   XIP_MAIN = 0x01 << 7 //+ If 1, XIP_MAIN can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM0 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM0 = 0x01 << 1 //+ If 1, SRAM0 can be accessed from a Non-secure, Privileged context.
	SU    SRAM0 = 0x01 << 2 //+ If 1, and SP is also set, SRAM0 can be accessed from a Secure, Unprivileged context.
	SP    SRAM0 = 0x01 << 3 //+ If 1, SRAM0 can be accessed from a Secure, Privileged context.
	CORE0 SRAM0 = 0x01 << 4 //+ If 1, SRAM0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM0 = 0x01 << 5 //+ If 1, SRAM0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM0 = 0x01 << 6 //+ If 1, SRAM0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM0 = 0x01 << 7 //+ If 1, SRAM0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM1 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM1 = 0x01 << 1 //+ If 1, SRAM1 can be accessed from a Non-secure, Privileged context.
	SU    SRAM1 = 0x01 << 2 //+ If 1, and SP is also set, SRAM1 can be accessed from a Secure, Unprivileged context.
	SP    SRAM1 = 0x01 << 3 //+ If 1, SRAM1 can be accessed from a Secure, Privileged context.
	CORE0 SRAM1 = 0x01 << 4 //+ If 1, SRAM1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM1 = 0x01 << 5 //+ If 1, SRAM1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM1 = 0x01 << 6 //+ If 1, SRAM1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM1 = 0x01 << 7 //+ If 1, SRAM1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM2 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM2 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM2 = 0x01 << 1 //+ If 1, SRAM2 can be accessed from a Non-secure, Privileged context.
	SU    SRAM2 = 0x01 << 2 //+ If 1, and SP is also set, SRAM2 can be accessed from a Secure, Unprivileged context.
	SP    SRAM2 = 0x01 << 3 //+ If 1, SRAM2 can be accessed from a Secure, Privileged context.
	CORE0 SRAM2 = 0x01 << 4 //+ If 1, SRAM2 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM2 = 0x01 << 5 //+ If 1, SRAM2 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM2 = 0x01 << 6 //+ If 1, SRAM2 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM2 = 0x01 << 7 //+ If 1, SRAM2 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM3 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM3 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM3 = 0x01 << 1 //+ If 1, SRAM3 can be accessed from a Non-secure, Privileged context.
	SU    SRAM3 = 0x01 << 2 //+ If 1, and SP is also set, SRAM3 can be accessed from a Secure, Unprivileged context.
	SP    SRAM3 = 0x01 << 3 //+ If 1, SRAM3 can be accessed from a Secure, Privileged context.
	CORE0 SRAM3 = 0x01 << 4 //+ If 1, SRAM3 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM3 = 0x01 << 5 //+ If 1, SRAM3 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM3 = 0x01 << 6 //+ If 1, SRAM3 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM3 = 0x01 << 7 //+ If 1, SRAM3 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM4 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM4 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM4 = 0x01 << 1 //+ If 1, SRAM4 can be accessed from a Non-secure, Privileged context.
	SU    SRAM4 = 0x01 << 2 //+ If 1, and SP is also set, SRAM4 can be accessed from a Secure, Unprivileged context.
	SP    SRAM4 = 0x01 << 3 //+ If 1, SRAM4 can be accessed from a Secure, Privileged context.
	CORE0 SRAM4 = 0x01 << 4 //+ If 1, SRAM4 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM4 = 0x01 << 5 //+ If 1, SRAM4 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM4 = 0x01 << 6 //+ If 1, SRAM4 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM4 = 0x01 << 7 //+ If 1, SRAM4 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM5 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM5 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM5 = 0x01 << 1 //+ If 1, SRAM5 can be accessed from a Non-secure, Privileged context.
	SU    SRAM5 = 0x01 << 2 //+ If 1, and SP is also set, SRAM5 can be accessed from a Secure, Unprivileged context.
	SP    SRAM5 = 0x01 << 3 //+ If 1, SRAM5 can be accessed from a Secure, Privileged context.
	CORE0 SRAM5 = 0x01 << 4 //+ If 1, SRAM5 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM5 = 0x01 << 5 //+ If 1, SRAM5 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM5 = 0x01 << 6 //+ If 1, SRAM5 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM5 = 0x01 << 7 //+ If 1, SRAM5 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM6 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM6 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM6 = 0x01 << 1 //+ If 1, SRAM6 can be accessed from a Non-secure, Privileged context.
	SU    SRAM6 = 0x01 << 2 //+ If 1, and SP is also set, SRAM6 can be accessed from a Secure, Unprivileged context.
	SP    SRAM6 = 0x01 << 3 //+ If 1, SRAM6 can be accessed from a Secure, Privileged context.
	CORE0 SRAM6 = 0x01 << 4 //+ If 1, SRAM6 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM6 = 0x01 << 5 //+ If 1, SRAM6 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM6 = 0x01 << 6 //+ If 1, SRAM6 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM6 = 0x01 << 7 //+ If 1, SRAM6 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM7 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM7 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM7 = 0x01 << 1 //+ If 1, SRAM7 can be accessed from a Non-secure, Privileged context.
	SU    SRAM7 = 0x01 << 2 //+ If 1, and SP is also set, SRAM7 can be accessed from a Secure, Unprivileged context.
	SP    SRAM7 = 0x01 << 3 //+ If 1, SRAM7 can be accessed from a Secure, Privileged context.
	CORE0 SRAM7 = 0x01 << 4 //+ If 1, SRAM7 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM7 = 0x01 << 5 //+ If 1, SRAM7 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM7 = 0x01 << 6 //+ If 1, SRAM7 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM7 = 0x01 << 7 //+ If 1, SRAM7 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM8 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM8 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM8 = 0x01 << 1 //+ If 1, SRAM8 can be accessed from a Non-secure, Privileged context.
	SU    SRAM8 = 0x01 << 2 //+ If 1, and SP is also set, SRAM8 can be accessed from a Secure, Unprivileged context.
	SP    SRAM8 = 0x01 << 3 //+ If 1, SRAM8 can be accessed from a Secure, Privileged context.
	CORE0 SRAM8 = 0x01 << 4 //+ If 1, SRAM8 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM8 = 0x01 << 5 //+ If 1, SRAM8 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM8 = 0x01 << 6 //+ If 1, SRAM8 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM8 = 0x01 << 7 //+ If 1, SRAM8 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SRAM9 = 0x01 << 0 //+ If 1, and NSP is also set, SRAM9 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SRAM9 = 0x01 << 1 //+ If 1, SRAM9 can be accessed from a Non-secure, Privileged context.
	SU    SRAM9 = 0x01 << 2 //+ If 1, and SP is also set, SRAM9 can be accessed from a Secure, Unprivileged context.
	SP    SRAM9 = 0x01 << 3 //+ If 1, SRAM9 can be accessed from a Secure, Privileged context.
	CORE0 SRAM9 = 0x01 << 4 //+ If 1, SRAM9 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SRAM9 = 0x01 << 5 //+ If 1, SRAM9 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SRAM9 = 0x01 << 6 //+ If 1, SRAM9 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SRAM9 = 0x01 << 7 //+ If 1, SRAM9 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   DMA = 0x01 << 0 //+ If 1, and NSP is also set, DMA can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   DMA = 0x01 << 1 //+ If 1, DMA can be accessed from a Non-secure, Privileged context.
	SU    DMA = 0x01 << 2 //+ If 1, and SP is also set, DMA can be accessed from a Secure, Unprivileged context.
	SP    DMA = 0x01 << 3 //+ If 1, DMA can be accessed from a Secure, Privileged context.
	CORE0 DMA = 0x01 << 4 //+ If 1, DMA can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 DMA = 0x01 << 5 //+ If 1, DMA can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   DMA = 0x01 << 6 //+ If 1, DMA can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   DMA = 0x01 << 7 //+ If 1, DMA can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   USBCTRL = 0x01 << 0 //+ If 1, and NSP is also set, USBCTRL can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   USBCTRL = 0x01 << 1 //+ If 1, USBCTRL can be accessed from a Non-secure, Privileged context.
	SU    USBCTRL = 0x01 << 2 //+ If 1, and SP is also set, USBCTRL can be accessed from a Secure, Unprivileged context.
	SP    USBCTRL = 0x01 << 3 //+ If 1, USBCTRL can be accessed from a Secure, Privileged context.
	CORE0 USBCTRL = 0x01 << 4 //+ If 1, USBCTRL can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 USBCTRL = 0x01 << 5 //+ If 1, USBCTRL can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   USBCTRL = 0x01 << 6 //+ If 1, USBCTRL can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   USBCTRL = 0x01 << 7 //+ If 1, USBCTRL can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PIO0 = 0x01 << 0 //+ If 1, and NSP is also set, PIO0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PIO0 = 0x01 << 1 //+ If 1, PIO0 can be accessed from a Non-secure, Privileged context.
	SU    PIO0 = 0x01 << 2 //+ If 1, and SP is also set, PIO0 can be accessed from a Secure, Unprivileged context.
	SP    PIO0 = 0x01 << 3 //+ If 1, PIO0 can be accessed from a Secure, Privileged context.
	CORE0 PIO0 = 0x01 << 4 //+ If 1, PIO0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PIO0 = 0x01 << 5 //+ If 1, PIO0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PIO0 = 0x01 << 6 //+ If 1, PIO0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PIO0 = 0x01 << 7 //+ If 1, PIO0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PIO1 = 0x01 << 0 //+ If 1, and NSP is also set, PIO1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PIO1 = 0x01 << 1 //+ If 1, PIO1 can be accessed from a Non-secure, Privileged context.
	SU    PIO1 = 0x01 << 2 //+ If 1, and SP is also set, PIO1 can be accessed from a Secure, Unprivileged context.
	SP    PIO1 = 0x01 << 3 //+ If 1, PIO1 can be accessed from a Secure, Privileged context.
	CORE0 PIO1 = 0x01 << 4 //+ If 1, PIO1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PIO1 = 0x01 << 5 //+ If 1, PIO1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PIO1 = 0x01 << 6 //+ If 1, PIO1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PIO1 = 0x01 << 7 //+ If 1, PIO1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PIO2 = 0x01 << 0 //+ If 1, and NSP is also set, PIO2 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PIO2 = 0x01 << 1 //+ If 1, PIO2 can be accessed from a Non-secure, Privileged context.
	SU    PIO2 = 0x01 << 2 //+ If 1, and SP is also set, PIO2 can be accessed from a Secure, Unprivileged context.
	SP    PIO2 = 0x01 << 3 //+ If 1, PIO2 can be accessed from a Secure, Privileged context.
	CORE0 PIO2 = 0x01 << 4 //+ If 1, PIO2 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PIO2 = 0x01 << 5 //+ If 1, PIO2 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PIO2 = 0x01 << 6 //+ If 1, PIO2 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PIO2 = 0x01 << 7 //+ If 1, PIO2 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   CORESIGHT_TRACE = 0x01 << 0 //+ If 1, and NSP is also set, CORESIGHT_TRACE can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   CORESIGHT_TRACE = 0x01 << 1 //+ If 1, CORESIGHT_TRACE can be accessed from a Non-secure, Privileged context.
	SU    CORESIGHT_TRACE = 0x01 << 2 //+ If 1, and SP is also set, CORESIGHT_TRACE can be accessed from a Secure, Unprivileged context.
	SP    CORESIGHT_TRACE = 0x01 << 3 //+ If 1, CORESIGHT_TRACE can be accessed from a Secure, Privileged context.
	CORE0 CORESIGHT_TRACE = 0x01 << 4 //+ If 1, CORESIGHT_TRACE can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 CORESIGHT_TRACE = 0x01 << 5 //+ If 1, CORESIGHT_TRACE can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   CORESIGHT_TRACE = 0x01 << 6 //+ If 1, CORESIGHT_TRACE can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   CORESIGHT_TRACE = 0x01 << 7 //+ If 1, CORESIGHT_TRACE can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   CORESIGHT_PERIPH = 0x01 << 0 //+ If 1, and NSP is also set, CORESIGHT_PERIPH can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   CORESIGHT_PERIPH = 0x01 << 1 //+ If 1, CORESIGHT_PERIPH can be accessed from a Non-secure, Privileged context.
	SU    CORESIGHT_PERIPH = 0x01 << 2 //+ If 1, and SP is also set, CORESIGHT_PERIPH can be accessed from a Secure, Unprivileged context.
	SP    CORESIGHT_PERIPH = 0x01 << 3 //+ If 1, CORESIGHT_PERIPH can be accessed from a Secure, Privileged context.
	CORE0 CORESIGHT_PERIPH = 0x01 << 4 //+ If 1, CORESIGHT_PERIPH can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 CORESIGHT_PERIPH = 0x01 << 5 //+ If 1, CORESIGHT_PERIPH can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   CORESIGHT_PERIPH = 0x01 << 6 //+ If 1, CORESIGHT_PERIPH can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   CORESIGHT_PERIPH = 0x01 << 7 //+ If 1, CORESIGHT_PERIPH can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SYSINFO = 0x01 << 0 //+ If 1, and NSP is also set, SYSINFO can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SYSINFO = 0x01 << 1 //+ If 1, SYSINFO can be accessed from a Non-secure, Privileged context.
	SU    SYSINFO = 0x01 << 2 //+ If 1, and SP is also set, SYSINFO can be accessed from a Secure, Unprivileged context.
	SP    SYSINFO = 0x01 << 3 //+ If 1, SYSINFO can be accessed from a Secure, Privileged context.
	CORE0 SYSINFO = 0x01 << 4 //+ If 1, SYSINFO can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SYSINFO = 0x01 << 5 //+ If 1, SYSINFO can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SYSINFO = 0x01 << 6 //+ If 1, SYSINFO can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SYSINFO = 0x01 << 7 //+ If 1, SYSINFO can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   RESETS = 0x01 << 0 //+ If 1, and NSP is also set, RESETS can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   RESETS = 0x01 << 1 //+ If 1, RESETS can be accessed from a Non-secure, Privileged context.
	SU    RESETS = 0x01 << 2 //+ If 1, and SP is also set, RESETS can be accessed from a Secure, Unprivileged context.
	SP    RESETS = 0x01 << 3 //+ If 1, RESETS can be accessed from a Secure, Privileged context.
	CORE0 RESETS = 0x01 << 4 //+ If 1, RESETS can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 RESETS = 0x01 << 5 //+ If 1, RESETS can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   RESETS = 0x01 << 6 //+ If 1, RESETS can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   RESETS = 0x01 << 7 //+ If 1, RESETS can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   IO_BANK0 = 0x01 << 0 //+ If 1, and NSP is also set, IO_BANK0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   IO_BANK0 = 0x01 << 1 //+ If 1, IO_BANK0 can be accessed from a Non-secure, Privileged context.
	SU    IO_BANK0 = 0x01 << 2 //+ If 1, and SP is also set, IO_BANK0 can be accessed from a Secure, Unprivileged context.
	SP    IO_BANK0 = 0x01 << 3 //+ If 1, IO_BANK0 can be accessed from a Secure, Privileged context.
	CORE0 IO_BANK0 = 0x01 << 4 //+ If 1, IO_BANK0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 IO_BANK0 = 0x01 << 5 //+ If 1, IO_BANK0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   IO_BANK0 = 0x01 << 6 //+ If 1, IO_BANK0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   IO_BANK0 = 0x01 << 7 //+ If 1, IO_BANK0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   IO_BANK1 = 0x01 << 0 //+ If 1, and NSP is also set, IO_BANK1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   IO_BANK1 = 0x01 << 1 //+ If 1, IO_BANK1 can be accessed from a Non-secure, Privileged context.
	SU    IO_BANK1 = 0x01 << 2 //+ If 1, and SP is also set, IO_BANK1 can be accessed from a Secure, Unprivileged context.
	SP    IO_BANK1 = 0x01 << 3 //+ If 1, IO_BANK1 can be accessed from a Secure, Privileged context.
	CORE0 IO_BANK1 = 0x01 << 4 //+ If 1, IO_BANK1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 IO_BANK1 = 0x01 << 5 //+ If 1, IO_BANK1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   IO_BANK1 = 0x01 << 6 //+ If 1, IO_BANK1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   IO_BANK1 = 0x01 << 7 //+ If 1, IO_BANK1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PADS_BANK0 = 0x01 << 0 //+ If 1, and NSP is also set, PADS_BANK0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PADS_BANK0 = 0x01 << 1 //+ If 1, PADS_BANK0 can be accessed from a Non-secure, Privileged context.
	SU    PADS_BANK0 = 0x01 << 2 //+ If 1, and SP is also set, PADS_BANK0 can be accessed from a Secure, Unprivileged context.
	SP    PADS_BANK0 = 0x01 << 3 //+ If 1, PADS_BANK0 can be accessed from a Secure, Privileged context.
	CORE0 PADS_BANK0 = 0x01 << 4 //+ If 1, PADS_BANK0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PADS_BANK0 = 0x01 << 5 //+ If 1, PADS_BANK0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PADS_BANK0 = 0x01 << 6 //+ If 1, PADS_BANK0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PADS_BANK0 = 0x01 << 7 //+ If 1, PADS_BANK0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PADS_QSPI = 0x01 << 0 //+ If 1, and NSP is also set, PADS_QSPI can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PADS_QSPI = 0x01 << 1 //+ If 1, PADS_QSPI can be accessed from a Non-secure, Privileged context.
	SU    PADS_QSPI = 0x01 << 2 //+ If 1, and SP is also set, PADS_QSPI can be accessed from a Secure, Unprivileged context.
	SP    PADS_QSPI = 0x01 << 3 //+ If 1, PADS_QSPI can be accessed from a Secure, Privileged context.
	CORE0 PADS_QSPI = 0x01 << 4 //+ If 1, PADS_QSPI can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PADS_QSPI = 0x01 << 5 //+ If 1, PADS_QSPI can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PADS_QSPI = 0x01 << 6 //+ If 1, PADS_QSPI can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PADS_QSPI = 0x01 << 7 //+ If 1, PADS_QSPI can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   BUSCTRL = 0x01 << 0 //+ If 1, and NSP is also set, BUSCTRL can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   BUSCTRL = 0x01 << 1 //+ If 1, BUSCTRL can be accessed from a Non-secure, Privileged context.
	SU    BUSCTRL = 0x01 << 2 //+ If 1, and SP is also set, BUSCTRL can be accessed from a Secure, Unprivileged context.
	SP    BUSCTRL = 0x01 << 3 //+ If 1, BUSCTRL can be accessed from a Secure, Privileged context.
	CORE0 BUSCTRL = 0x01 << 4 //+ If 1, BUSCTRL can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 BUSCTRL = 0x01 << 5 //+ If 1, BUSCTRL can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   BUSCTRL = 0x01 << 6 //+ If 1, BUSCTRL can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   BUSCTRL = 0x01 << 7 //+ If 1, BUSCTRL can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   ADC0 = 0x01 << 0 //+ If 1, and NSP is also set, ADC0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   ADC0 = 0x01 << 1 //+ If 1, ADC0 can be accessed from a Non-secure, Privileged context.
	SU    ADC0 = 0x01 << 2 //+ If 1, and SP is also set, ADC0 can be accessed from a Secure, Unprivileged context.
	SP    ADC0 = 0x01 << 3 //+ If 1, ADC0 can be accessed from a Secure, Privileged context.
	CORE0 ADC0 = 0x01 << 4 //+ If 1, ADC0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 ADC0 = 0x01 << 5 //+ If 1, ADC0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   ADC0 = 0x01 << 6 //+ If 1, ADC0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   ADC0 = 0x01 << 7 //+ If 1, ADC0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   HSTX = 0x01 << 0 //+ If 1, and NSP is also set, HSTX can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   HSTX = 0x01 << 1 //+ If 1, HSTX can be accessed from a Non-secure, Privileged context.
	SU    HSTX = 0x01 << 2 //+ If 1, and SP is also set, HSTX can be accessed from a Secure, Unprivileged context.
	SP    HSTX = 0x01 << 3 //+ If 1, HSTX can be accessed from a Secure, Privileged context.
	CORE0 HSTX = 0x01 << 4 //+ If 1, HSTX can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 HSTX = 0x01 << 5 //+ If 1, HSTX can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   HSTX = 0x01 << 6 //+ If 1, HSTX can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   HSTX = 0x01 << 7 //+ If 1, HSTX can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   I2C0 = 0x01 << 0 //+ If 1, and NSP is also set, I2C0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   I2C0 = 0x01 << 1 //+ If 1, I2C0 can be accessed from a Non-secure, Privileged context.
	SU    I2C0 = 0x01 << 2 //+ If 1, and SP is also set, I2C0 can be accessed from a Secure, Unprivileged context.
	SP    I2C0 = 0x01 << 3 //+ If 1, I2C0 can be accessed from a Secure, Privileged context.
	CORE0 I2C0 = 0x01 << 4 //+ If 1, I2C0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 I2C0 = 0x01 << 5 //+ If 1, I2C0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   I2C0 = 0x01 << 6 //+ If 1, I2C0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   I2C0 = 0x01 << 7 //+ If 1, I2C0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   I2C1 = 0x01 << 0 //+ If 1, and NSP is also set, I2C1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   I2C1 = 0x01 << 1 //+ If 1, I2C1 can be accessed from a Non-secure, Privileged context.
	SU    I2C1 = 0x01 << 2 //+ If 1, and SP is also set, I2C1 can be accessed from a Secure, Unprivileged context.
	SP    I2C1 = 0x01 << 3 //+ If 1, I2C1 can be accessed from a Secure, Privileged context.
	CORE0 I2C1 = 0x01 << 4 //+ If 1, I2C1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 I2C1 = 0x01 << 5 //+ If 1, I2C1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   I2C1 = 0x01 << 6 //+ If 1, I2C1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   I2C1 = 0x01 << 7 //+ If 1, I2C1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PWM = 0x01 << 0 //+ If 1, and NSP is also set, PWM can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PWM = 0x01 << 1 //+ If 1, PWM can be accessed from a Non-secure, Privileged context.
	SU    PWM = 0x01 << 2 //+ If 1, and SP is also set, PWM can be accessed from a Secure, Unprivileged context.
	SP    PWM = 0x01 << 3 //+ If 1, PWM can be accessed from a Secure, Privileged context.
	CORE0 PWM = 0x01 << 4 //+ If 1, PWM can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PWM = 0x01 << 5 //+ If 1, PWM can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PWM = 0x01 << 6 //+ If 1, PWM can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PWM = 0x01 << 7 //+ If 1, PWM can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SPI0 = 0x01 << 0 //+ If 1, and NSP is also set, SPI0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SPI0 = 0x01 << 1 //+ If 1, SPI0 can be accessed from a Non-secure, Privileged context.
	SU    SPI0 = 0x01 << 2 //+ If 1, and SP is also set, SPI0 can be accessed from a Secure, Unprivileged context.
	SP    SPI0 = 0x01 << 3 //+ If 1, SPI0 can be accessed from a Secure, Privileged context.
	CORE0 SPI0 = 0x01 << 4 //+ If 1, SPI0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SPI0 = 0x01 << 5 //+ If 1, SPI0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SPI0 = 0x01 << 6 //+ If 1, SPI0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SPI0 = 0x01 << 7 //+ If 1, SPI0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SPI1 = 0x01 << 0 //+ If 1, and NSP is also set, SPI1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SPI1 = 0x01 << 1 //+ If 1, SPI1 can be accessed from a Non-secure, Privileged context.
	SU    SPI1 = 0x01 << 2 //+ If 1, and SP is also set, SPI1 can be accessed from a Secure, Unprivileged context.
	SP    SPI1 = 0x01 << 3 //+ If 1, SPI1 can be accessed from a Secure, Privileged context.
	CORE0 SPI1 = 0x01 << 4 //+ If 1, SPI1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SPI1 = 0x01 << 5 //+ If 1, SPI1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SPI1 = 0x01 << 6 //+ If 1, SPI1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SPI1 = 0x01 << 7 //+ If 1, SPI1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   TIMER0 = 0x01 << 0 //+ If 1, and NSP is also set, TIMER0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   TIMER0 = 0x01 << 1 //+ If 1, TIMER0 can be accessed from a Non-secure, Privileged context.
	SU    TIMER0 = 0x01 << 2 //+ If 1, and SP is also set, TIMER0 can be accessed from a Secure, Unprivileged context.
	SP    TIMER0 = 0x01 << 3 //+ If 1, TIMER0 can be accessed from a Secure, Privileged context.
	CORE0 TIMER0 = 0x01 << 4 //+ If 1, TIMER0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 TIMER0 = 0x01 << 5 //+ If 1, TIMER0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   TIMER0 = 0x01 << 6 //+ If 1, TIMER0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   TIMER0 = 0x01 << 7 //+ If 1, TIMER0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   TIMER1 = 0x01 << 0 //+ If 1, and NSP is also set, TIMER1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   TIMER1 = 0x01 << 1 //+ If 1, TIMER1 can be accessed from a Non-secure, Privileged context.
	SU    TIMER1 = 0x01 << 2 //+ If 1, and SP is also set, TIMER1 can be accessed from a Secure, Unprivileged context.
	SP    TIMER1 = 0x01 << 3 //+ If 1, TIMER1 can be accessed from a Secure, Privileged context.
	CORE0 TIMER1 = 0x01 << 4 //+ If 1, TIMER1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 TIMER1 = 0x01 << 5 //+ If 1, TIMER1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   TIMER1 = 0x01 << 6 //+ If 1, TIMER1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   TIMER1 = 0x01 << 7 //+ If 1, TIMER1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   UART0 = 0x01 << 0 //+ If 1, and NSP is also set, UART0 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   UART0 = 0x01 << 1 //+ If 1, UART0 can be accessed from a Non-secure, Privileged context.
	SU    UART0 = 0x01 << 2 //+ If 1, and SP is also set, UART0 can be accessed from a Secure, Unprivileged context.
	SP    UART0 = 0x01 << 3 //+ If 1, UART0 can be accessed from a Secure, Privileged context.
	CORE0 UART0 = 0x01 << 4 //+ If 1, UART0 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 UART0 = 0x01 << 5 //+ If 1, UART0 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   UART0 = 0x01 << 6 //+ If 1, UART0 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   UART0 = 0x01 << 7 //+ If 1, UART0 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   UART1 = 0x01 << 0 //+ If 1, and NSP is also set, UART1 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   UART1 = 0x01 << 1 //+ If 1, UART1 can be accessed from a Non-secure, Privileged context.
	SU    UART1 = 0x01 << 2 //+ If 1, and SP is also set, UART1 can be accessed from a Secure, Unprivileged context.
	SP    UART1 = 0x01 << 3 //+ If 1, UART1 can be accessed from a Secure, Privileged context.
	CORE0 UART1 = 0x01 << 4 //+ If 1, UART1 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 UART1 = 0x01 << 5 //+ If 1, UART1 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   UART1 = 0x01 << 6 //+ If 1, UART1 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   UART1 = 0x01 << 7 //+ If 1, UART1 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   OTP = 0x01 << 0 //+ If 1, and NSP is also set, OTP can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   OTP = 0x01 << 1 //+ If 1, OTP can be accessed from a Non-secure, Privileged context.
	SU    OTP = 0x01 << 2 //+ If 1, and SP is also set, OTP can be accessed from a Secure, Unprivileged context.
	SP    OTP = 0x01 << 3 //+ If 1, OTP can be accessed from a Secure, Privileged context.
	CORE0 OTP = 0x01 << 4 //+ If 1, OTP can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 OTP = 0x01 << 5 //+ If 1, OTP can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   OTP = 0x01 << 6 //+ If 1, OTP can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   OTP = 0x01 << 7 //+ If 1, OTP can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   TBMAN = 0x01 << 0 //+ If 1, and NSP is also set, TBMAN can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   TBMAN = 0x01 << 1 //+ If 1, TBMAN can be accessed from a Non-secure, Privileged context.
	SU    TBMAN = 0x01 << 2 //+ If 1, and SP is also set, TBMAN can be accessed from a Secure, Unprivileged context.
	SP    TBMAN = 0x01 << 3 //+ If 1, TBMAN can be accessed from a Secure, Privileged context.
	CORE0 TBMAN = 0x01 << 4 //+ If 1, TBMAN can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 TBMAN = 0x01 << 5 //+ If 1, TBMAN can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   TBMAN = 0x01 << 6 //+ If 1, TBMAN can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   TBMAN = 0x01 << 7 //+ If 1, TBMAN can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   POWMAN = 0x01 << 0 //+ If 1, and NSP is also set, POWMAN can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   POWMAN = 0x01 << 1 //+ If 1, POWMAN can be accessed from a Non-secure, Privileged context.
	SU    POWMAN = 0x01 << 2 //+ If 1, and SP is also set, POWMAN can be accessed from a Secure, Unprivileged context.
	SP    POWMAN = 0x01 << 3 //+ If 1, POWMAN can be accessed from a Secure, Privileged context.
	CORE0 POWMAN = 0x01 << 4 //+ If 1, POWMAN can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 POWMAN = 0x01 << 5 //+ If 1, POWMAN can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   POWMAN = 0x01 << 6 //+ If 1, POWMAN can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   POWMAN = 0x01 << 7 //+ If 1, POWMAN can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   TRNG = 0x01 << 0 //+ If 1, and NSP is also set, TRNG can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   TRNG = 0x01 << 1 //+ If 1, TRNG can be accessed from a Non-secure, Privileged context.
	SU    TRNG = 0x01 << 2 //+ If 1, and SP is also set, TRNG can be accessed from a Secure, Unprivileged context.
	SP    TRNG = 0x01 << 3 //+ If 1, TRNG can be accessed from a Secure, Privileged context.
	CORE0 TRNG = 0x01 << 4 //+ If 1, TRNG can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 TRNG = 0x01 << 5 //+ If 1, TRNG can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   TRNG = 0x01 << 6 //+ If 1, TRNG can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   TRNG = 0x01 << 7 //+ If 1, TRNG can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SHA256 = 0x01 << 0 //+ If 1, and NSP is also set, SHA256 can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SHA256 = 0x01 << 1 //+ If 1, SHA256 can be accessed from a Non-secure, Privileged context.
	SU    SHA256 = 0x01 << 2 //+ If 1, and SP is also set, SHA256 can be accessed from a Secure, Unprivileged context.
	SP    SHA256 = 0x01 << 3 //+ If 1, SHA256 can be accessed from a Secure, Privileged context.
	CORE0 SHA256 = 0x01 << 4 //+ If 1, SHA256 can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SHA256 = 0x01 << 5 //+ If 1, SHA256 can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SHA256 = 0x01 << 6 //+ If 1, SHA256 can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SHA256 = 0x01 << 7 //+ If 1, SHA256 can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   SYSCFG = 0x01 << 0 //+ If 1, and NSP is also set, SYSCFG can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   SYSCFG = 0x01 << 1 //+ If 1, SYSCFG can be accessed from a Non-secure, Privileged context.
	SU    SYSCFG = 0x01 << 2 //+ If 1, and SP is also set, SYSCFG can be accessed from a Secure, Unprivileged context.
	SP    SYSCFG = 0x01 << 3 //+ If 1, SYSCFG can be accessed from a Secure, Privileged context.
	CORE0 SYSCFG = 0x01 << 4 //+ If 1, SYSCFG can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 SYSCFG = 0x01 << 5 //+ If 1, SYSCFG can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   SYSCFG = 0x01 << 6 //+ If 1, SYSCFG can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   SYSCFG = 0x01 << 7 //+ If 1, SYSCFG can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   CLOCKS = 0x01 << 0 //+ If 1, and NSP is also set, CLOCKS can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   CLOCKS = 0x01 << 1 //+ If 1, CLOCKS can be accessed from a Non-secure, Privileged context.
	SU    CLOCKS = 0x01 << 2 //+ If 1, and SP is also set, CLOCKS can be accessed from a Secure, Unprivileged context.
	SP    CLOCKS = 0x01 << 3 //+ If 1, CLOCKS can be accessed from a Secure, Privileged context.
	CORE0 CLOCKS = 0x01 << 4 //+ If 1, CLOCKS can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 CLOCKS = 0x01 << 5 //+ If 1, CLOCKS can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   CLOCKS = 0x01 << 6 //+ If 1, CLOCKS can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   CLOCKS = 0x01 << 7 //+ If 1, CLOCKS can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   XOSC = 0x01 << 0 //+ If 1, and NSP is also set, XOSC can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   XOSC = 0x01 << 1 //+ If 1, XOSC can be accessed from a Non-secure, Privileged context.
	SU    XOSC = 0x01 << 2 //+ If 1, and SP is also set, XOSC can be accessed from a Secure, Unprivileged context.
	SP    XOSC = 0x01 << 3 //+ If 1, XOSC can be accessed from a Secure, Privileged context.
	CORE0 XOSC = 0x01 << 4 //+ If 1, XOSC can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 XOSC = 0x01 << 5 //+ If 1, XOSC can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   XOSC = 0x01 << 6 //+ If 1, XOSC can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   XOSC = 0x01 << 7 //+ If 1, XOSC can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   ROSC = 0x01 << 0 //+ If 1, and NSP is also set, ROSC can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   ROSC = 0x01 << 1 //+ If 1, ROSC can be accessed from a Non-secure, Privileged context.
	SU    ROSC = 0x01 << 2 //+ If 1, and SP is also set, ROSC can be accessed from a Secure, Unprivileged context.
	SP    ROSC = 0x01 << 3 //+ If 1, ROSC can be accessed from a Secure, Privileged context.
	CORE0 ROSC = 0x01 << 4 //+ If 1, ROSC can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 ROSC = 0x01 << 5 //+ If 1, ROSC can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   ROSC = 0x01 << 6 //+ If 1, ROSC can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   ROSC = 0x01 << 7 //+ If 1, ROSC can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PLL_SYS = 0x01 << 0 //+ If 1, and NSP is also set, PLL_SYS can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PLL_SYS = 0x01 << 1 //+ If 1, PLL_SYS can be accessed from a Non-secure, Privileged context.
	SU    PLL_SYS = 0x01 << 2 //+ If 1, and SP is also set, PLL_SYS can be accessed from a Secure, Unprivileged context.
	SP    PLL_SYS = 0x01 << 3 //+ If 1, PLL_SYS can be accessed from a Secure, Privileged context.
	CORE0 PLL_SYS = 0x01 << 4 //+ If 1, PLL_SYS can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PLL_SYS = 0x01 << 5 //+ If 1, PLL_SYS can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PLL_SYS = 0x01 << 6 //+ If 1, PLL_SYS can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PLL_SYS = 0x01 << 7 //+ If 1, PLL_SYS can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   PLL_USB = 0x01 << 0 //+ If 1, and NSP is also set, PLL_USB can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   PLL_USB = 0x01 << 1 //+ If 1, PLL_USB can be accessed from a Non-secure, Privileged context.
	SU    PLL_USB = 0x01 << 2 //+ If 1, and SP is also set, PLL_USB can be accessed from a Secure, Unprivileged context.
	SP    PLL_USB = 0x01 << 3 //+ If 1, PLL_USB can be accessed from a Secure, Privileged context.
	CORE0 PLL_USB = 0x01 << 4 //+ If 1, PLL_USB can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 PLL_USB = 0x01 << 5 //+ If 1, PLL_USB can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   PLL_USB = 0x01 << 6 //+ If 1, PLL_USB can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   PLL_USB = 0x01 << 7 //+ If 1, PLL_USB can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   TICKS = 0x01 << 0 //+ If 1, and NSP is also set, TICKS can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   TICKS = 0x01 << 1 //+ If 1, TICKS can be accessed from a Non-secure, Privileged context.
	SU    TICKS = 0x01 << 2 //+ If 1, and SP is also set, TICKS can be accessed from a Secure, Unprivileged context.
	SP    TICKS = 0x01 << 3 //+ If 1, TICKS can be accessed from a Secure, Privileged context.
	CORE0 TICKS = 0x01 << 4 //+ If 1, TICKS can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 TICKS = 0x01 << 5 //+ If 1, TICKS can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   TICKS = 0x01 << 6 //+ If 1, TICKS can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   TICKS = 0x01 << 7 //+ If 1, TICKS can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   WATCHDOG = 0x01 << 0 //+ If 1, and NSP is also set, WATCHDOG can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   WATCHDOG = 0x01 << 1 //+ If 1, WATCHDOG can be accessed from a Non-secure, Privileged context.
	SU    WATCHDOG = 0x01 << 2 //+ If 1, and SP is also set, WATCHDOG can be accessed from a Secure, Unprivileged context.
	SP    WATCHDOG = 0x01 << 3 //+ If 1, WATCHDOG can be accessed from a Secure, Privileged context.
	CORE0 WATCHDOG = 0x01 << 4 //+ If 1, WATCHDOG can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 WATCHDOG = 0x01 << 5 //+ If 1, WATCHDOG can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   WATCHDOG = 0x01 << 6 //+ If 1, WATCHDOG can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   WATCHDOG = 0x01 << 7 //+ If 1, WATCHDOG can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   RSM = 0x01 << 0 //+ If 1, and NSP is also set, RSM can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   RSM = 0x01 << 1 //+ If 1, RSM can be accessed from a Non-secure, Privileged context.
	SU    RSM = 0x01 << 2 //+ If 1, and SP is also set, RSM can be accessed from a Secure, Unprivileged context.
	SP    RSM = 0x01 << 3 //+ If 1, RSM can be accessed from a Secure, Privileged context.
	CORE0 RSM = 0x01 << 4 //+ If 1, RSM can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 RSM = 0x01 << 5 //+ If 1, RSM can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   RSM = 0x01 << 6 //+ If 1, RSM can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   RSM = 0x01 << 7 //+ If 1, RSM can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   XIP_CTRL = 0x01 << 0 //+ If 1, and NSP is also set, XIP_CTRL can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   XIP_CTRL = 0x01 << 1 //+ If 1, XIP_CTRL can be accessed from a Non-secure, Privileged context.
	SU    XIP_CTRL = 0x01 << 2 //+ If 1, and SP is also set, XIP_CTRL can be accessed from a Secure, Unprivileged context.
	SP    XIP_CTRL = 0x01 << 3 //+ If 1, XIP_CTRL can be accessed from a Secure, Privileged context.
	CORE0 XIP_CTRL = 0x01 << 4 //+ If 1, XIP_CTRL can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 XIP_CTRL = 0x01 << 5 //+ If 1, XIP_CTRL can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   XIP_CTRL = 0x01 << 6 //+ If 1, XIP_CTRL can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   XIP_CTRL = 0x01 << 7 //+ If 1, XIP_CTRL can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   XIP_QMI = 0x01 << 0 //+ If 1, and NSP is also set, XIP_QMI can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   XIP_QMI = 0x01 << 1 //+ If 1, XIP_QMI can be accessed from a Non-secure, Privileged context.
	SU    XIP_QMI = 0x01 << 2 //+ If 1, and SP is also set, XIP_QMI can be accessed from a Secure, Unprivileged context.
	SP    XIP_QMI = 0x01 << 3 //+ If 1, XIP_QMI can be accessed from a Secure, Privileged context.
	CORE0 XIP_QMI = 0x01 << 4 //+ If 1, XIP_QMI can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 XIP_QMI = 0x01 << 5 //+ If 1, XIP_QMI can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   XIP_QMI = 0x01 << 6 //+ If 1, XIP_QMI can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   XIP_QMI = 0x01 << 7 //+ If 1, XIP_QMI can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)

const (
	NSU   XIP_AUX = 0x01 << 0 //+ If 1, and NSP is also set, XIP_AUX can be accessed from a Non-secure, Unprivileged context. This bit is writable from a Non-secure, Privileged context, if and only if the NSP bit is set.
	NSP   XIP_AUX = 0x01 << 1 //+ If 1, XIP_AUX can be accessed from a Non-secure, Privileged context.
	SU    XIP_AUX = 0x01 << 2 //+ If 1, and SP is also set, XIP_AUX can be accessed from a Secure, Unprivileged context.
	SP    XIP_AUX = 0x01 << 3 //+ If 1, XIP_AUX can be accessed from a Secure, Privileged context.
	CORE0 XIP_AUX = 0x01 << 4 //+ If 1, XIP_AUX can be accessed by core 0, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	CORE1 XIP_AUX = 0x01 << 5 //+ If 1, XIP_AUX can be accessed by core 1, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DMA   XIP_AUX = 0x01 << 6 //+ If 1, XIP_AUX can be accessed by the DMA, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
	DBG   XIP_AUX = 0x01 << 7 //+ If 1, XIP_AUX can be accessed by the debugger, at security/privilege levels permitted by SP/NSP/SU/NSU in this register.
)

const (
	NSUn   = 0
	NSPn   = 1
	SUn    = 2
	SPn    = 3
	CORE0n = 4
	CORE1n = 5
	DMAn   = 6
	DBGn   = 7
)
