// Code generated by xgen -g; DO NOT EDIT.

//go:build rp2350

package dma

import (
	"embedded/mmio"
	"structs"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	_ structs.HostLayout

	CH                 [16]SCH
	INT                [4]SINT
	TIMER              [4]mmio.R32[TIMER]
	MULTI_CHAN_TRIGGER mmio.R32[uint32]
	SNIFF_CTRL         mmio.R32[SNIFF_CTRL]
	SNIFF_DATA         mmio.R32[uint32]
	_                  uint32
	FIFO_LEVELS        mmio.R32[FIFO_LEVELS]
	_                  uint32
	N_CHANNELS         mmio.R32[uint32]
	_                  [5]uint32
	SECCFG_CH          [16]mmio.R32[SECCFG_CH]
	SECCFG_IRQ         [4]mmio.R32[SECCFG_IRQ]
	SECCFG_MISC        mmio.R32[SECCFG_MISC]
	_                  [11]uint32
	MPU_CTRL           mmio.R32[MPU_CTRL]
	MPU                [8]SMPU
	_                  [175]uint32
	CH_DBG             [16]SCH_DBG
}

func DMA0() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type SCH struct {
	_ structs.HostLayout

	READ_ADDR            mmio.R32[uint32]
	WRITE_ADDR           mmio.R32[uint32]
	TRANS_COUNT          mmio.R32[TRANS_COUNT]
	CTRL_TRIG            mmio.R32[CTRL]
	AL1_CTRL             mmio.R32[CTRL]
	AL1_READ_ADDR        mmio.R32[uint32]
	AL1_WRITE_ADDR       mmio.R32[uint32]
	AL1_TRANS_COUNT_TRIG mmio.R32[TRANS_COUNT]
	AL2_CTRL             mmio.R32[CTRL]
	AL2_TRANS_COUNT      mmio.R32[TRANS_COUNT]
	AL2_READ_ADDR        mmio.R32[uint32]
	AL2_WRITE_ADDR_TRIG  mmio.R32[uint32]
	AL3_CTRL             mmio.R32[CTRL]
	AL3_WRITE_ADDR       mmio.R32[uint32]
	AL3_TRANS_COUNT      mmio.R32[TRANS_COUNT]
	AL3_READ_ADDR_TRIG   mmio.R32[uint32]
}

type TRANS_COUNT uint32

func COUNT_(p *Periph, i int) mmio.RM32[TRANS_COUNT] {
	return mmio.RM32[TRANS_COUNT]{R: &p.CH[i].TRANS_COUNT, Mask: COUNT}
}
func MODE_(p *Periph, i int) mmio.RM32[TRANS_COUNT] {
	return mmio.RM32[TRANS_COUNT]{R: &p.CH[i].TRANS_COUNT, Mask: MODE}
}

type CTRL uint32

type SINT struct {
	_ structs.HostLayout

	R mmio.R32[uint32]
	E mmio.R32[uint32]
	F mmio.R32[uint32]
	S mmio.R32[uint32]
}

type TIMER uint32

func Y_(p *Periph, i int) mmio.RM32[TIMER] { return mmio.RM32[TIMER]{R: &p.TIMER[i], Mask: Y} }
func X_(p *Periph, i int) mmio.RM32[TIMER] { return mmio.RM32[TIMER]{R: &p.TIMER[i], Mask: X} }

type SNIFF_CTRL uint32

func SEN_(p *Periph) mmio.RM32[SNIFF_CTRL] { return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: SEN} }
func DMACH_(p *Periph) mmio.RM32[SNIFF_CTRL] {
	return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: DMACH}
}
func CALC_(p *Periph) mmio.RM32[SNIFF_CTRL] {
	return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: CALC}
}
func SBSWAP_(p *Periph) mmio.RM32[SNIFF_CTRL] {
	return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: SBSWAP}
}
func OUT_REV_(p *Periph) mmio.RM32[SNIFF_CTRL] {
	return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: OUT_REV}
}
func OUT_INV_(p *Periph) mmio.RM32[SNIFF_CTRL] {
	return mmio.RM32[SNIFF_CTRL]{R: &p.SNIFF_CTRL, Mask: OUT_INV}
}

type FIFO_LEVELS uint32

func TDF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{R: &p.FIFO_LEVELS, Mask: TDF_LVL}
}
func WAF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{R: &p.FIFO_LEVELS, Mask: WAF_LVL}
}
func RAF_LVL_(p *Periph) mmio.RM32[FIFO_LEVELS] {
	return mmio.RM32[FIFO_LEVELS]{R: &p.FIFO_LEVELS, Mask: RAF_LVL}
}

type SECCFG_CH uint32

func PRI_CH_(p *Periph, i int) mmio.RM32[SECCFG_CH] {
	return mmio.RM32[SECCFG_CH]{R: &p.SECCFG_CH[i], Mask: PRI_CH}
}
func SEC_CH_(p *Periph, i int) mmio.RM32[SECCFG_CH] {
	return mmio.RM32[SECCFG_CH]{R: &p.SECCFG_CH[i], Mask: SEC_CH}
}
func LOCK_(p *Periph, i int) mmio.RM32[SECCFG_CH] {
	return mmio.RM32[SECCFG_CH]{R: &p.SECCFG_CH[i], Mask: LOCK}
}

type SECCFG_IRQ uint32

func PRI_IRQ_(p *Periph, i int) mmio.RM32[SECCFG_IRQ] {
	return mmio.RM32[SECCFG_IRQ]{R: &p.SECCFG_IRQ[i], Mask: PRI_IRQ}
}
func SEC_IRQ_(p *Periph, i int) mmio.RM32[SECCFG_IRQ] {
	return mmio.RM32[SECCFG_IRQ]{R: &p.SECCFG_IRQ[i], Mask: SEC_IRQ}
}

type SECCFG_MISC uint32

func SNIFF_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: SNIFF_P}
}
func SNIFF_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: SNIFF_S}
}
func TIMER0_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER0_P}
}
func TIMER0_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER0_S}
}
func TIMER1_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER1_P}
}
func TIMER1_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER1_S}
}
func TIMER2_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER2_P}
}
func TIMER2_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER2_S}
}
func TIMER3_P_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER3_P}
}
func TIMER3_S_(p *Periph) mmio.RM32[SECCFG_MISC] {
	return mmio.RM32[SECCFG_MISC]{R: &p.SECCFG_MISC, Mask: TIMER3_S}
}

type MPU_CTRL uint32

func DEF_PRI_(p *Periph) mmio.RM32[MPU_CTRL] {
	return mmio.RM32[MPU_CTRL]{R: &p.MPU_CTRL, Mask: DEF_PRI}
}
func DEF_SEC_(p *Periph) mmio.RM32[MPU_CTRL] {
	return mmio.RM32[MPU_CTRL]{R: &p.MPU_CTRL, Mask: DEF_SEC}
}
func NS_HIDE_ADDR_(p *Periph) mmio.RM32[MPU_CTRL] {
	return mmio.RM32[MPU_CTRL]{R: &p.MPU_CTRL, Mask: NS_HIDE_ADDR}
}

type SMPU struct {
	_ structs.HostLayout

	BAR mmio.R32[uint32]
	LAR mmio.R32[LAR]
}

type LAR uint32

func REN_(p *Periph, i int) mmio.RM32[LAR]  { return mmio.RM32[LAR]{R: &p.MPU[i].LAR, Mask: REN} }
func RPRI_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{R: &p.MPU[i].LAR, Mask: RPRI} }
func RSEC_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{R: &p.MPU[i].LAR, Mask: RSEC} }
func ADDR_(p *Periph, i int) mmio.RM32[LAR] { return mmio.RM32[LAR]{R: &p.MPU[i].LAR, Mask: ADDR} }

type SCH_DBG struct {
	_ structs.HostLayout

	DBG_CTDREQ mmio.R32[uint32]
	DBG_TCR    mmio.R32[uint32]
}
