// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package pll provides access to the registers of the PLL_SYS peripheral.
//
// Instances:
//
//	SYS  PLL_SYS_BASE  -  PLL_SYS
//	USB  PLL_USB_BASE  -  PLL_USB
//
// Registers:
//
//	0x000 32  CS            Control and Status GENERAL CONSTRAINTS: Reference clock frequency min=5MHz, max=800MHz Feedback divider min=16, max=320 VCO frequency min=750MHz, max=1600MHz
//	0x004 32  PWR           Controls the PLL power modes.
//	0x008 32  FBDIV_INT     Feedback divisor (note: this PLL does not support fractional division)
//	0x00C 32  PRIM(uint32)  Controls the PLL post dividers for the primary output (note: this PLL does not have a secondary output) the primary output is driven from VCO divided by postdiv1*postdiv2
//	0x010 32  INTR          Raw Interrupts
//	0x014 32  INTE          Interrupt Enable
//	0x018 32  INTF          Interrupt Force
//	0x01C 32  INTS          Interrupt status after masking & forcing
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package pll

const (
	REFDIV CS = 0x3F << 0  //+ Divides the PLL input reference clock. Behaviour is undefined for div=0. PLL output will be unpredictable during refdiv changes, wait for lock=1 before using it.
	BYPASS CS = 0x01 << 8  //+ Passes the reference clock to the output instead of the divided VCO. The VCO continues to run so the user can switch between the reference clock and the divided VCO but the output will glitch when doing so.
	LOCK_N CS = 0x01 << 30 //+ PLL is not locked Ideally this is cleared when PLL lock is seen and this should never normally be set
	LOCK   CS = 0x01 << 31 //+ PLL is locked
)

const (
	REFDIVn = 0
	BYPASSn = 8
	LOCK_Nn = 30
	LOCKn   = 31
)

const (
	PD        PWR = 0x01 << 0 //+ PLL powerdown To save power set high when PLL output not required.
	DSMPD     PWR = 0x01 << 2 //+ PLL DSM powerdown Nothing is achieved by setting this low.
	POSTDIVPD PWR = 0x01 << 3 //+ PLL post divider powerdown To save power set high when PLL output not required or bypass=1.
	VCOPD     PWR = 0x01 << 5 //+ PLL VCO powerdown To save power set high when PLL output not required or bypass=1.
)

const (
	PDn        = 0
	DSMPDn     = 2
	POSTDIVPDn = 3
	VCOPDn     = 5
)

const (
	POSTDIV2 uint32 = 0x07 << 12 //+ divide by 1-7
	POSTDIV1 uint32 = 0x07 << 16 //+ divide by 1-7
)

const (
	POSTDIV2n = 12
	POSTDIV1n = 16
)
