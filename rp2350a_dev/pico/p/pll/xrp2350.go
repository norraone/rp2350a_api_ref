// Code generated by xgen -g; DO NOT EDIT.

//go:build rp2350

package pll

import (
	"embedded/mmio"
	"structs"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	_ structs.HostLayout

	CS        mmio.R32[CS]
	PWR       mmio.R32[PWR]
	FBDIV_INT mmio.R32[uint32]
	PRIM      mmio.R32[uint32]
	INTR      mmio.R32[uint32]
	INTE      mmio.R32[uint32]
	INTF      mmio.R32[uint32]
	INTS      mmio.R32[uint32]
}

func SYS() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PLL_SYS_BASE))) }
func USB() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PLL_USB_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CS uint32

func REFDIV_(p *Periph) mmio.RM32[CS] { return mmio.RM32[CS]{R: &p.CS, Mask: REFDIV} }
func BYPASS_(p *Periph) mmio.RM32[CS] { return mmio.RM32[CS]{R: &p.CS, Mask: BYPASS} }
func LOCK_N_(p *Periph) mmio.RM32[CS] { return mmio.RM32[CS]{R: &p.CS, Mask: LOCK_N} }
func LOCK_(p *Periph) mmio.RM32[CS]   { return mmio.RM32[CS]{R: &p.CS, Mask: LOCK} }

type PWR uint32

func PD_(p *Periph) mmio.RM32[PWR]        { return mmio.RM32[PWR]{R: &p.PWR, Mask: PD} }
func DSMPD_(p *Periph) mmio.RM32[PWR]     { return mmio.RM32[PWR]{R: &p.PWR, Mask: DSMPD} }
func POSTDIVPD_(p *Periph) mmio.RM32[PWR] { return mmio.RM32[PWR]{R: &p.PWR, Mask: POSTDIVPD} }
func VCOPD_(p *Periph) mmio.RM32[PWR]     { return mmio.RM32[PWR]{R: &p.PWR, Mask: VCOPD} }
