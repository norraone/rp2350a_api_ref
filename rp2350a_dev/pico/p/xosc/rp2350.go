// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package xosc provides access to the registers of the XOSC peripheral.
//
// Instances:
//
//	XOSC  XOSC_BASE  -  -  Controls the crystal oscillator
//
// Registers:
//
//	0x000 32  CTRL             Crystal Oscillator Control
//	0x004 32  STATUS(CTRL)     Crystal Oscillator Status
//	0x008 32  DORMANT(uint32)  Crystal Oscillator pause control
//	0x00C 32  STARTUP          Controls the startup delay
//	0x010 32  COUNT            A down counter running at the xosc frequency which counts to zero and stops. Can be used for short software pauses when setting up time sensitive hardware. To start the counter, write a non-zero value. Reads will return 1 while the count is running and 0 when it has finished. Minimum count value is 4. Count values <4 will be treated as count value =4. Note that synchronisation to the register clock domain costs 2 register clock cycles and the counter cannot compensate for that.
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package xosc

const (
	FREQ_RANGE  CTRL = 0xFFF << 0 //+ The 12-bit code is intended to give some protection against accidental writes. An invalid setting will retain the previous value. The actual value being used can be read from STATUS_FREQ_RANGE
	FR1_15MHZ   CTRL = 0xAA0 << 0
	FR10_30MHZ  CTRL = 0xAA1 << 0
	FR25_60MHZ  CTRL = 0xAA2 << 0
	FR40_100MHZ CTRL = 0xAA3 << 0
	EN          CTRL = 0xFFF << 12 //+ On power-up this field is initialised to DISABLE and the chip runs from the ROSC. If the chip has subsequently been programmed to run from the XOSC then setting this field to DISABLE may lock-up the chip. If this is a concern then run the clk_ref from the ROSC and enable the clk_sys RESUS feature. The 12-bit code is intended to give some protection against accidental writes. An invalid setting will retain the previous value. The actual value being used can be read from STATUS_ENABLED
	DISABLE     CTRL = 0xD1E << 12
	ENABLE      CTRL = 0xFAB << 12
	ENABLED     CTRL = 0x01 << 12    //  Oscillator is enabled but not necessarily running and stable, resets to 0
	BADWRITE    CTRL = 0x1000 << 12  //  An invalid value has been written to EN or FREQ_RANGE or DORMANT
	STABLE      CTRL = 0x80000 << 12 //  Oscillator is running and stable
)

const (
	FREQ_RANGEn = 0
	ENn         = 12
)

const (
	DORMANT     uint32 = 0xFFFFFFFF << 0 //+ This is used to save power by pausing the XOSC On power-up this field is initialised to WAKE An invalid write will also select WAKE Warning: stop the PLLs before selecting dormant mode Warning: setup the irq before selecting dormant mode
	DORMANT_VAL uint32 = 0x636F6D61 << 0
	WAKE_VAL    uint32 = 0x77616B65 << 0
)

const (
	DORMANTn = 0
)

const (
	DELAY STARTUP = 0x3FFF << 0 //+ in multiples of 256*xtal_period. The reset value of 0xc4 corresponds to approx 50 000 cycles.
	X4    STARTUP = 0x01 << 20  //+ Multiplies the startup_delay by 4, just in case. The reset value is controlled by a mask-programmable tiecell and is provided in case we are booting from XOSC and the default startup delay is insufficient. The reset value is 0x0.
)

const (
	DELAYn = 0
	X4n    = 20
)
