// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package ioqspi provides access to the registers of the IO_QSPI peripheral.
//
// Instances:
//
//	IO_QSPI  IO_QSPI_BASE  -  IO_QSPI,IO_QSPI_NS
//
// Registers:
//
//	0x000 32  USBPHY_DP_STATUS
//	0x004 32  USBPHY_DP_CTRL
//	0x008 32  USBPHY_DM_STATUS
//	0x00C 32  USBPHY_DM_CTRL
//	0x010 32  GPIO_QSPI_SCLK_STATUS
//	0x014 32  GPIO_QSPI_SCLK_CTRL
//	0x018 32  GPIO_QSPI_SS_STATUS
//	0x01C 32  GPIO_QSPI_SS_CTRL
//	0x020 32  GPIO_QSPI_SD0_STATUS
//	0x024 32  GPIO_QSPI_SD0_CTRL
//	0x028 32  GPIO_QSPI_SD1_STATUS
//	0x02C 32  GPIO_QSPI_SD1_CTRL
//	0x030 32  GPIO_QSPI_SD2_STATUS
//	0x034 32  GPIO_QSPI_SD2_CTRL
//	0x038 32  GPIO_QSPI_SD3_STATUS
//	0x03C 32  GPIO_QSPI_SD3_CTRL
//	0x200 32  IRQSUMMARY_PROC0_SECURE
//	0x204 32  IRQSUMMARY_PROC0_NONSECURE
//	0x208 32  IRQSUMMARY_PROC1_SECURE
//	0x20C 32  IRQSUMMARY_PROC1_NONSECURE
//	0x210 32  IRQSUMMARY_DORMANT_WAKE_SECURE
//	0x214 32  IRQSUMMARY_DORMANT_WAKE_NONSECURE
//	0x218 32  INTR                               Raw Interrupts
//	0x21C 32  PROC0_INTE                         Interrupt Enable for proc0
//	0x220 32  PROC0_INTF                         Interrupt Force for proc0
//	0x224 32  PROC0_INTS                         Interrupt status after masking & forcing for proc0
//	0x228 32  PROC1_INTE                         Interrupt Enable for proc1
//	0x22C 32  PROC1_INTF                         Interrupt Force for proc1
//	0x230 32  PROC1_INTS                         Interrupt status after masking & forcing for proc1
//	0x234 32  DORMANT_WAKE_INTE                  Interrupt Enable for dormant_wake
//	0x238 32  DORMANT_WAKE_INTF                  Interrupt Force for dormant_wake
//	0x23C 32  DORMANT_WAKE_INTS                  Interrupt status after masking & forcing for dormant_wake
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package ioqspi

const (
	OUTTOPAD  USBPHY_DP_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   USBPHY_DP_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD USBPHY_DP_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC USBPHY_DP_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      USBPHY_DP_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	UART1_TX     USBPHY_DP_CTRL = 0x02 << 0
	I2C0_SDA     USBPHY_DP_CTRL = 0x03 << 0
	SIOB_PROC_56 USBPHY_DP_CTRL = 0x05 << 0
	NULL         USBPHY_DP_CTRL = 0x1F << 0
	OUTOVER      USBPHY_DP_CTRL = 0x03 << 12 //+
	NORMAL       USBPHY_DP_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       USBPHY_DP_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          USBPHY_DP_CTRL = 0x02 << 12 //  drive output low
	HIGH         USBPHY_DP_CTRL = 0x03 << 12 //  drive output high
	OEOVER       USBPHY_DP_CTRL = 0x03 << 14 //+
	NORMAL       USBPHY_DP_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       USBPHY_DP_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      USBPHY_DP_CTRL = 0x02 << 14 //  disable output
	ENABLE       USBPHY_DP_CTRL = 0x03 << 14 //  enable output
	INOVER       USBPHY_DP_CTRL = 0x03 << 16 //+
	NORMAL       USBPHY_DP_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       USBPHY_DP_CTRL = 0x01 << 16 //  invert the peri input
	LOW          USBPHY_DP_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         USBPHY_DP_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      USBPHY_DP_CTRL = 0x03 << 28 //+
	NORMAL       USBPHY_DP_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       USBPHY_DP_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          USBPHY_DP_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         USBPHY_DP_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  USBPHY_DM_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   USBPHY_DM_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD USBPHY_DM_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC USBPHY_DM_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      USBPHY_DM_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	UART1_RX     USBPHY_DM_CTRL = 0x02 << 0
	I2C0_SCL     USBPHY_DM_CTRL = 0x03 << 0
	SIOB_PROC_57 USBPHY_DM_CTRL = 0x05 << 0
	NULL         USBPHY_DM_CTRL = 0x1F << 0
	OUTOVER      USBPHY_DM_CTRL = 0x03 << 12 //+
	NORMAL       USBPHY_DM_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       USBPHY_DM_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          USBPHY_DM_CTRL = 0x02 << 12 //  drive output low
	HIGH         USBPHY_DM_CTRL = 0x03 << 12 //  drive output high
	OEOVER       USBPHY_DM_CTRL = 0x03 << 14 //+
	NORMAL       USBPHY_DM_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       USBPHY_DM_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      USBPHY_DM_CTRL = 0x02 << 14 //  disable output
	ENABLE       USBPHY_DM_CTRL = 0x03 << 14 //  enable output
	INOVER       USBPHY_DM_CTRL = 0x03 << 16 //+
	NORMAL       USBPHY_DM_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       USBPHY_DM_CTRL = 0x01 << 16 //  invert the peri input
	LOW          USBPHY_DM_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         USBPHY_DM_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      USBPHY_DM_CTRL = 0x03 << 28 //+
	NORMAL       USBPHY_DM_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       USBPHY_DM_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          USBPHY_DM_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         USBPHY_DM_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SCLK_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SCLK_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SCLK_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SCLK_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SCLK_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SCLK     GPIO_QSPI_SCLK_CTRL = 0x00 << 0
	UART1_CTS    GPIO_QSPI_SCLK_CTRL = 0x02 << 0
	I2C1_SDA     GPIO_QSPI_SCLK_CTRL = 0x03 << 0
	SIOB_PROC_58 GPIO_QSPI_SCLK_CTRL = 0x05 << 0
	UART1_TX     GPIO_QSPI_SCLK_CTRL = 0x0B << 0
	NULL         GPIO_QSPI_SCLK_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SCLK_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SCLK_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SCLK_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SCLK_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SCLK_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SCLK_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SCLK_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SCLK_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SCLK_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SCLK_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SCLK_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SCLK_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SCLK_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SCLK_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SCLK_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SCLK_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SCLK_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SCLK_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SCLK_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SCLK_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SS_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SS_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SS_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SS_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SS_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SS_N_0   GPIO_QSPI_SS_CTRL = 0x00 << 0
	UART1_RTS    GPIO_QSPI_SS_CTRL = 0x02 << 0
	I2C1_SCL     GPIO_QSPI_SS_CTRL = 0x03 << 0
	SIOB_PROC_59 GPIO_QSPI_SS_CTRL = 0x05 << 0
	UART1_RX     GPIO_QSPI_SS_CTRL = 0x0B << 0
	NULL         GPIO_QSPI_SS_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SS_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SS_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SS_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SS_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SS_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SS_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SS_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SS_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SS_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SS_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SS_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SS_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SS_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SS_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SS_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SS_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SS_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SS_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SS_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SS_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SD0_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SD0_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SD0_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SD0_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SD0_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SD0      GPIO_QSPI_SD0_CTRL = 0x00 << 0
	UART0_TX     GPIO_QSPI_SD0_CTRL = 0x02 << 0
	I2C0_SDA     GPIO_QSPI_SD0_CTRL = 0x03 << 0
	SIOB_PROC_60 GPIO_QSPI_SD0_CTRL = 0x05 << 0
	NULL         GPIO_QSPI_SD0_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SD0_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SD0_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD0_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SD0_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SD0_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SD0_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SD0_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD0_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SD0_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SD0_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SD0_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SD0_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SD0_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SD0_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SD0_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SD0_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SD0_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SD0_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SD0_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SD0_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SD1_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SD1_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SD1_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SD1_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SD1_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SD1      GPIO_QSPI_SD1_CTRL = 0x00 << 0
	UART0_RX     GPIO_QSPI_SD1_CTRL = 0x02 << 0
	I2C0_SCL     GPIO_QSPI_SD1_CTRL = 0x03 << 0
	SIOB_PROC_61 GPIO_QSPI_SD1_CTRL = 0x05 << 0
	NULL         GPIO_QSPI_SD1_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SD1_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SD1_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD1_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SD1_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SD1_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SD1_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SD1_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD1_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SD1_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SD1_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SD1_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SD1_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SD1_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SD1_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SD1_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SD1_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SD1_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SD1_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SD1_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SD1_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SD2_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SD2_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SD2_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SD2_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SD2_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SD2      GPIO_QSPI_SD2_CTRL = 0x00 << 0
	UART0_CTS    GPIO_QSPI_SD2_CTRL = 0x02 << 0
	I2C1_SDA     GPIO_QSPI_SD2_CTRL = 0x03 << 0
	SIOB_PROC_62 GPIO_QSPI_SD2_CTRL = 0x05 << 0
	UART0_TX     GPIO_QSPI_SD2_CTRL = 0x0B << 0
	NULL         GPIO_QSPI_SD2_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SD2_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SD2_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD2_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SD2_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SD2_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SD2_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SD2_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD2_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SD2_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SD2_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SD2_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SD2_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SD2_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SD2_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SD2_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SD2_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SD2_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SD2_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SD2_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SD2_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	OUTTOPAD  GPIO_QSPI_SD3_STATUS = 0x01 << 9  //+ output signal to pad after register override is applied
	OETOPAD   GPIO_QSPI_SD3_STATUS = 0x01 << 13 //+ output enable to pad after register override is applied
	INFROMPAD GPIO_QSPI_SD3_STATUS = 0x01 << 17 //+ input signal from pad, before filtering and override are applied
	IRQTOPROC GPIO_QSPI_SD3_STATUS = 0x01 << 26 //+ interrupt to processors, after override is applied
)

const (
	OUTTOPADn  = 9
	OETOPADn   = 13
	INFROMPADn = 17
	IRQTOPROCn = 26
)

const (
	FUNCSEL      GPIO_QSPI_SD3_CTRL = 0x1F << 0 //+ 0-31 -> selects pin function according to the gpio table 31 == NULL
	XIP_SD3      GPIO_QSPI_SD3_CTRL = 0x00 << 0
	UART0_RTS    GPIO_QSPI_SD3_CTRL = 0x02 << 0
	I2C1_SCL     GPIO_QSPI_SD3_CTRL = 0x03 << 0
	SIOB_PROC_63 GPIO_QSPI_SD3_CTRL = 0x05 << 0
	UART0_RX     GPIO_QSPI_SD3_CTRL = 0x0B << 0
	NULL         GPIO_QSPI_SD3_CTRL = 0x1F << 0
	OUTOVER      GPIO_QSPI_SD3_CTRL = 0x03 << 12 //+
	NORMAL       GPIO_QSPI_SD3_CTRL = 0x00 << 12 //  drive output from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD3_CTRL = 0x01 << 12 //  drive output from inverse of peripheral signal selected by funcsel
	LOW          GPIO_QSPI_SD3_CTRL = 0x02 << 12 //  drive output low
	HIGH         GPIO_QSPI_SD3_CTRL = 0x03 << 12 //  drive output high
	OEOVER       GPIO_QSPI_SD3_CTRL = 0x03 << 14 //+
	NORMAL       GPIO_QSPI_SD3_CTRL = 0x00 << 14 //  drive output enable from peripheral signal selected by funcsel
	INVERT       GPIO_QSPI_SD3_CTRL = 0x01 << 14 //  drive output enable from inverse of peripheral signal selected by funcsel
	DISABLE      GPIO_QSPI_SD3_CTRL = 0x02 << 14 //  disable output
	ENABLE       GPIO_QSPI_SD3_CTRL = 0x03 << 14 //  enable output
	INOVER       GPIO_QSPI_SD3_CTRL = 0x03 << 16 //+
	NORMAL       GPIO_QSPI_SD3_CTRL = 0x00 << 16 //  don't invert the peri input
	INVERT       GPIO_QSPI_SD3_CTRL = 0x01 << 16 //  invert the peri input
	LOW          GPIO_QSPI_SD3_CTRL = 0x02 << 16 //  drive peri input low
	HIGH         GPIO_QSPI_SD3_CTRL = 0x03 << 16 //  drive peri input high
	IRQOVER      GPIO_QSPI_SD3_CTRL = 0x03 << 28 //+
	NORMAL       GPIO_QSPI_SD3_CTRL = 0x00 << 28 //  don't invert the interrupt
	INVERT       GPIO_QSPI_SD3_CTRL = 0x01 << 28 //  invert the interrupt
	LOW          GPIO_QSPI_SD3_CTRL = 0x02 << 28 //  drive interrupt low
	HIGH         GPIO_QSPI_SD3_CTRL = 0x03 << 28 //  drive interrupt high
)

const (
	FUNCSELn = 0
	OUTOVERn = 12
	OEOVERn  = 14
	INOVERn  = 16
	IRQOVERn = 28
)

const (
	USBPHY_DP      IRQSUMMARY_PROC0_SECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_PROC0_SECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_PROC0_SECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_PROC0_SECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_PROC0_SECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_PROC0_SECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_PROC0_SECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_PROC0_SECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP      IRQSUMMARY_PROC0_NONSECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_PROC0_NONSECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_PROC0_NONSECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_PROC0_NONSECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_PROC0_NONSECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_PROC0_NONSECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_PROC0_NONSECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_PROC0_NONSECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP      IRQSUMMARY_PROC1_SECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_PROC1_SECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_PROC1_SECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_PROC1_SECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_PROC1_SECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_PROC1_SECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_PROC1_SECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_PROC1_SECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP      IRQSUMMARY_PROC1_NONSECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_PROC1_NONSECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_PROC1_NONSECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_PROC1_NONSECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_PROC1_NONSECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_PROC1_NONSECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_PROC1_NONSECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_PROC1_NONSECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP      IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_DORMANT_WAKE_SECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP      IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 0 //+
	USBPHY_DM      IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 1 //+
	GPIO_QSPI_SCLK IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 2 //+
	GPIO_QSPI_SS   IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 3 //+
	GPIO_QSPI_SD0  IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 4 //+
	GPIO_QSPI_SD1  IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 5 //+
	GPIO_QSPI_SD2  IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 6 //+
	GPIO_QSPI_SD3  IRQSUMMARY_DORMANT_WAKE_NONSECURE = 0x01 << 7 //+
)

const (
	USBPHY_DPn      = 0
	USBPHY_DMn      = 1
	GPIO_QSPI_SCLKn = 2
	GPIO_QSPI_SSn   = 3
	GPIO_QSPI_SD0n  = 4
	GPIO_QSPI_SD1n  = 5
	GPIO_QSPI_SD2n  = 6
	GPIO_QSPI_SD3n  = 7
)

const (
	USBPHY_DP_LEVEL_LOW       INTR = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      INTR = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        INTR = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       INTR = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       INTR = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      INTR = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        INTR = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       INTR = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  INTR = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH INTR = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   INTR = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  INTR = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    INTR = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   INTR = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     INTR = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    INTR = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   INTR = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  INTR = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    INTR = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   INTR = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   INTR = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  INTR = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    INTR = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   INTR = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   INTR = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  INTR = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    INTR = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   INTR = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   INTR = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  INTR = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    INTR = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   INTR = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC0_INTE = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC0_INTE = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC0_INTE = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC0_INTE = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC0_INTE = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC0_INTE = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC0_INTE = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC0_INTE = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC0_INTE = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC0_INTE = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC0_INTE = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC0_INTE = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC0_INTE = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC0_INTE = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC0_INTE = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC0_INTE = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC0_INTE = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC0_INTE = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC0_INTE = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC0_INTE = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC0_INTE = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC0_INTE = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC0_INTE = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC0_INTE = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC0_INTE = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC0_INTE = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC0_INTE = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC0_INTE = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC0_INTE = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC0_INTE = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC0_INTE = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC0_INTE = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC0_INTF = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC0_INTF = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC0_INTF = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC0_INTF = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC0_INTF = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC0_INTF = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC0_INTF = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC0_INTF = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC0_INTF = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC0_INTF = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC0_INTF = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC0_INTF = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC0_INTF = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC0_INTF = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC0_INTF = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC0_INTF = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC0_INTF = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC0_INTF = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC0_INTF = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC0_INTF = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC0_INTF = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC0_INTF = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC0_INTF = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC0_INTF = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC0_INTF = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC0_INTF = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC0_INTF = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC0_INTF = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC0_INTF = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC0_INTF = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC0_INTF = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC0_INTF = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC0_INTS = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC0_INTS = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC0_INTS = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC0_INTS = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC0_INTS = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC0_INTS = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC0_INTS = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC0_INTS = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC0_INTS = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC0_INTS = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC0_INTS = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC0_INTS = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC0_INTS = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC0_INTS = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC0_INTS = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC0_INTS = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC0_INTS = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC0_INTS = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC0_INTS = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC0_INTS = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC0_INTS = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC0_INTS = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC0_INTS = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC0_INTS = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC0_INTS = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC0_INTS = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC0_INTS = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC0_INTS = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC0_INTS = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC0_INTS = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC0_INTS = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC0_INTS = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC1_INTE = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC1_INTE = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC1_INTE = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC1_INTE = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC1_INTE = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC1_INTE = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC1_INTE = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC1_INTE = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC1_INTE = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC1_INTE = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC1_INTE = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC1_INTE = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC1_INTE = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC1_INTE = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC1_INTE = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC1_INTE = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC1_INTE = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC1_INTE = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC1_INTE = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC1_INTE = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC1_INTE = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC1_INTE = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC1_INTE = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC1_INTE = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC1_INTE = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC1_INTE = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC1_INTE = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC1_INTE = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC1_INTE = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC1_INTE = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC1_INTE = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC1_INTE = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC1_INTF = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC1_INTF = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC1_INTF = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC1_INTF = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC1_INTF = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC1_INTF = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC1_INTF = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC1_INTF = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC1_INTF = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC1_INTF = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC1_INTF = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC1_INTF = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC1_INTF = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC1_INTF = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC1_INTF = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC1_INTF = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC1_INTF = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC1_INTF = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC1_INTF = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC1_INTF = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC1_INTF = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC1_INTF = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC1_INTF = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC1_INTF = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC1_INTF = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC1_INTF = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC1_INTF = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC1_INTF = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC1_INTF = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC1_INTF = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC1_INTF = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC1_INTF = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       PROC1_INTS = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      PROC1_INTS = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        PROC1_INTS = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       PROC1_INTS = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       PROC1_INTS = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      PROC1_INTS = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        PROC1_INTS = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       PROC1_INTS = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  PROC1_INTS = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH PROC1_INTS = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   PROC1_INTS = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  PROC1_INTS = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    PROC1_INTS = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   PROC1_INTS = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     PROC1_INTS = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    PROC1_INTS = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   PROC1_INTS = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  PROC1_INTS = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    PROC1_INTS = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   PROC1_INTS = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   PROC1_INTS = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  PROC1_INTS = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    PROC1_INTS = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   PROC1_INTS = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   PROC1_INTS = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  PROC1_INTS = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    PROC1_INTS = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   PROC1_INTS = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   PROC1_INTS = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  PROC1_INTS = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    PROC1_INTS = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   PROC1_INTS = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       DORMANT_WAKE_INTE = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      DORMANT_WAKE_INTE = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        DORMANT_WAKE_INTE = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       DORMANT_WAKE_INTE = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       DORMANT_WAKE_INTE = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      DORMANT_WAKE_INTE = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        DORMANT_WAKE_INTE = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       DORMANT_WAKE_INTE = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  DORMANT_WAKE_INTE = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH DORMANT_WAKE_INTE = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   DORMANT_WAKE_INTE = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  DORMANT_WAKE_INTE = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    DORMANT_WAKE_INTE = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   DORMANT_WAKE_INTE = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     DORMANT_WAKE_INTE = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    DORMANT_WAKE_INTE = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   DORMANT_WAKE_INTE = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  DORMANT_WAKE_INTE = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    DORMANT_WAKE_INTE = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   DORMANT_WAKE_INTE = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   DORMANT_WAKE_INTE = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  DORMANT_WAKE_INTE = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    DORMANT_WAKE_INTE = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   DORMANT_WAKE_INTE = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   DORMANT_WAKE_INTE = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  DORMANT_WAKE_INTE = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    DORMANT_WAKE_INTE = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   DORMANT_WAKE_INTE = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   DORMANT_WAKE_INTE = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  DORMANT_WAKE_INTE = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    DORMANT_WAKE_INTE = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   DORMANT_WAKE_INTE = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       DORMANT_WAKE_INTF = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      DORMANT_WAKE_INTF = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        DORMANT_WAKE_INTF = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       DORMANT_WAKE_INTF = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       DORMANT_WAKE_INTF = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      DORMANT_WAKE_INTF = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        DORMANT_WAKE_INTF = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       DORMANT_WAKE_INTF = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  DORMANT_WAKE_INTF = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH DORMANT_WAKE_INTF = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   DORMANT_WAKE_INTF = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  DORMANT_WAKE_INTF = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    DORMANT_WAKE_INTF = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   DORMANT_WAKE_INTF = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     DORMANT_WAKE_INTF = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    DORMANT_WAKE_INTF = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   DORMANT_WAKE_INTF = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  DORMANT_WAKE_INTF = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    DORMANT_WAKE_INTF = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   DORMANT_WAKE_INTF = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   DORMANT_WAKE_INTF = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  DORMANT_WAKE_INTF = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    DORMANT_WAKE_INTF = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   DORMANT_WAKE_INTF = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   DORMANT_WAKE_INTF = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  DORMANT_WAKE_INTF = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    DORMANT_WAKE_INTF = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   DORMANT_WAKE_INTF = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   DORMANT_WAKE_INTF = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  DORMANT_WAKE_INTF = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    DORMANT_WAKE_INTF = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   DORMANT_WAKE_INTF = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)

const (
	USBPHY_DP_LEVEL_LOW       DORMANT_WAKE_INTS = 0x01 << 0  //+
	USBPHY_DP_LEVEL_HIGH      DORMANT_WAKE_INTS = 0x01 << 1  //+
	USBPHY_DP_EDGE_LOW        DORMANT_WAKE_INTS = 0x01 << 2  //+
	USBPHY_DP_EDGE_HIGH       DORMANT_WAKE_INTS = 0x01 << 3  //+
	USBPHY_DM_LEVEL_LOW       DORMANT_WAKE_INTS = 0x01 << 4  //+
	USBPHY_DM_LEVEL_HIGH      DORMANT_WAKE_INTS = 0x01 << 5  //+
	USBPHY_DM_EDGE_LOW        DORMANT_WAKE_INTS = 0x01 << 6  //+
	USBPHY_DM_EDGE_HIGH       DORMANT_WAKE_INTS = 0x01 << 7  //+
	GPIO_QSPI_SCLK_LEVEL_LOW  DORMANT_WAKE_INTS = 0x01 << 8  //+
	GPIO_QSPI_SCLK_LEVEL_HIGH DORMANT_WAKE_INTS = 0x01 << 9  //+
	GPIO_QSPI_SCLK_EDGE_LOW   DORMANT_WAKE_INTS = 0x01 << 10 //+
	GPIO_QSPI_SCLK_EDGE_HIGH  DORMANT_WAKE_INTS = 0x01 << 11 //+
	GPIO_QSPI_SS_LEVEL_LOW    DORMANT_WAKE_INTS = 0x01 << 12 //+
	GPIO_QSPI_SS_LEVEL_HIGH   DORMANT_WAKE_INTS = 0x01 << 13 //+
	GPIO_QSPI_SS_EDGE_LOW     DORMANT_WAKE_INTS = 0x01 << 14 //+
	GPIO_QSPI_SS_EDGE_HIGH    DORMANT_WAKE_INTS = 0x01 << 15 //+
	GPIO_QSPI_SD0_LEVEL_LOW   DORMANT_WAKE_INTS = 0x01 << 16 //+
	GPIO_QSPI_SD0_LEVEL_HIGH  DORMANT_WAKE_INTS = 0x01 << 17 //+
	GPIO_QSPI_SD0_EDGE_LOW    DORMANT_WAKE_INTS = 0x01 << 18 //+
	GPIO_QSPI_SD0_EDGE_HIGH   DORMANT_WAKE_INTS = 0x01 << 19 //+
	GPIO_QSPI_SD1_LEVEL_LOW   DORMANT_WAKE_INTS = 0x01 << 20 //+
	GPIO_QSPI_SD1_LEVEL_HIGH  DORMANT_WAKE_INTS = 0x01 << 21 //+
	GPIO_QSPI_SD1_EDGE_LOW    DORMANT_WAKE_INTS = 0x01 << 22 //+
	GPIO_QSPI_SD1_EDGE_HIGH   DORMANT_WAKE_INTS = 0x01 << 23 //+
	GPIO_QSPI_SD2_LEVEL_LOW   DORMANT_WAKE_INTS = 0x01 << 24 //+
	GPIO_QSPI_SD2_LEVEL_HIGH  DORMANT_WAKE_INTS = 0x01 << 25 //+
	GPIO_QSPI_SD2_EDGE_LOW    DORMANT_WAKE_INTS = 0x01 << 26 //+
	GPIO_QSPI_SD2_EDGE_HIGH   DORMANT_WAKE_INTS = 0x01 << 27 //+
	GPIO_QSPI_SD3_LEVEL_LOW   DORMANT_WAKE_INTS = 0x01 << 28 //+
	GPIO_QSPI_SD3_LEVEL_HIGH  DORMANT_WAKE_INTS = 0x01 << 29 //+
	GPIO_QSPI_SD3_EDGE_LOW    DORMANT_WAKE_INTS = 0x01 << 30 //+
	GPIO_QSPI_SD3_EDGE_HIGH   DORMANT_WAKE_INTS = 0x01 << 31 //+
)

const (
	USBPHY_DP_LEVEL_LOWn       = 0
	USBPHY_DP_LEVEL_HIGHn      = 1
	USBPHY_DP_EDGE_LOWn        = 2
	USBPHY_DP_EDGE_HIGHn       = 3
	USBPHY_DM_LEVEL_LOWn       = 4
	USBPHY_DM_LEVEL_HIGHn      = 5
	USBPHY_DM_EDGE_LOWn        = 6
	USBPHY_DM_EDGE_HIGHn       = 7
	GPIO_QSPI_SCLK_LEVEL_LOWn  = 8
	GPIO_QSPI_SCLK_LEVEL_HIGHn = 9
	GPIO_QSPI_SCLK_EDGE_LOWn   = 10
	GPIO_QSPI_SCLK_EDGE_HIGHn  = 11
	GPIO_QSPI_SS_LEVEL_LOWn    = 12
	GPIO_QSPI_SS_LEVEL_HIGHn   = 13
	GPIO_QSPI_SS_EDGE_LOWn     = 14
	GPIO_QSPI_SS_EDGE_HIGHn    = 15
	GPIO_QSPI_SD0_LEVEL_LOWn   = 16
	GPIO_QSPI_SD0_LEVEL_HIGHn  = 17
	GPIO_QSPI_SD0_EDGE_LOWn    = 18
	GPIO_QSPI_SD0_EDGE_HIGHn   = 19
	GPIO_QSPI_SD1_LEVEL_LOWn   = 20
	GPIO_QSPI_SD1_LEVEL_HIGHn  = 21
	GPIO_QSPI_SD1_EDGE_LOWn    = 22
	GPIO_QSPI_SD1_EDGE_HIGHn   = 23
	GPIO_QSPI_SD2_LEVEL_LOWn   = 24
	GPIO_QSPI_SD2_LEVEL_HIGHn  = 25
	GPIO_QSPI_SD2_EDGE_LOWn    = 26
	GPIO_QSPI_SD2_EDGE_HIGHn   = 27
	GPIO_QSPI_SD3_LEVEL_LOWn   = 28
	GPIO_QSPI_SD3_LEVEL_HIGHn  = 29
	GPIO_QSPI_SD3_EDGE_LOWn    = 30
	GPIO_QSPI_SD3_EDGE_HIGHn   = 31
)
