// Code generated by svdxgen; DO NOT EDIT.

//go:build rp2350

// Package watchdog provides access to the registers of the WATCHDOG peripheral.
//
// Instances:
//
//	WATCHDOG  WATCHDOG_BASE  -  -
//
// Registers:
//
//	0x000 32  CTRL      Watchdog control The rst_wdsel register determines which subsystems are reset when the watchdog is triggered. The watchdog can be triggered in software.
//	0x004 32  LOAD      Load the watchdog timer. The maximum setting is 0xffffff which corresponds to approximately 16 seconds.
//	0x008 32  REASON    Logs the reason for the last reset. Both bits are zero for the case of a hardware reset. Additionally, as of RP2350, a debugger warm reset of either core (SYSRESETREQ or hartreset) will also clear the watchdog reason register, so that software loaded under the debugger following a watchdog timeout will not continue to see the timeout condition.
//	0x00C 32  SCRATCH0  Scratch register. Information persists through soft reset of the chip.
//	0x010 32  SCRATCH1  Scratch register. Information persists through soft reset of the chip.
//	0x014 32  SCRATCH2  Scratch register. Information persists through soft reset of the chip.
//	0x018 32  SCRATCH3  Scratch register. Information persists through soft reset of the chip.
//	0x01C 32  SCRATCH4  Scratch register. Information persists through soft reset of the chip.
//	0x020 32  SCRATCH5  Scratch register. Information persists through soft reset of the chip.
//	0x024 32  SCRATCH6  Scratch register. Information persists through soft reset of the chip.
//	0x028 32  SCRATCH7  Scratch register. Information persists through soft reset of the chip.
//
// Import:
//
//	github.com/embeddedgo/pico/p/mmap
package watchdog

const (
	TIME       CTRL = 0xFFFFFF << 0 //+ Indicates the time in usec before a watchdog reset will be triggered
	PAUSE_JTAG CTRL = 0x01 << 24    //+ Pause the watchdog timer when JTAG is accessing the bus fabric
	PAUSE_DBG0 CTRL = 0x01 << 25    //+ Pause the watchdog timer when processor 0 is in debug mode
	PAUSE_DBG1 CTRL = 0x01 << 26    //+ Pause the watchdog timer when processor 1 is in debug mode
	ENABLE     CTRL = 0x01 << 30    //+ When not enabled the watchdog timer is paused
	TRIGGER    CTRL = 0x01 << 31    //+ Trigger a watchdog reset
)

const (
	TIMEn       = 0
	PAUSE_JTAGn = 24
	PAUSE_DBG0n = 25
	PAUSE_DBG1n = 26
	ENABLEn     = 30
	TRIGGERn    = 31
)

const (
	TIMER REASON = 0x01 << 0 //+
	FORCE REASON = 0x01 << 1 //+
)

const (
	TIMERn = 0
	FORCEn = 1
)
