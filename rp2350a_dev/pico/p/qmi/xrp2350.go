// Code generated by xgen -g; DO NOT EDIT.

//go:build rp2350

package qmi

import (
	"embedded/mmio"
	"structs"
	"unsafe"

	"github.com/embeddedgo/pico/p/mmap"
)

type Periph struct {
	_ structs.HostLayout

	DIRECT_CSR mmio.R32[DIRECT_CSR]
	DIRECT_TX  mmio.R32[DIRECT_TX]
	DIRECT_RX  mmio.R32[uint32]
	M          [2]SM
	ATRANS     [8]mmio.R32[ATRANS]
}

func QMI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.QMI_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type DIRECT_CSR uint32

func EN_(p *Periph) mmio.RM32[DIRECT_CSR] { return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: EN} }
func BUSY_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: BUSY}
}
func ASSERT_CS0N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: ASSERT_CS0N}
}
func ASSERT_CS1N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: ASSERT_CS1N}
}
func AUTO_CS0N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: AUTO_CS0N}
}
func AUTO_CS1N_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: AUTO_CS1N}
}
func TXFULL_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: TXFULL}
}
func TXEMPTY_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: TXEMPTY}
}
func TXLEVEL_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: TXLEVEL}
}
func RXEMPTY_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: RXEMPTY}
}
func RXFULL_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: RXFULL}
}
func RXLEVEL_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: RXLEVEL}
}
func DCLKDIV_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: DCLKDIV}
}
func DRXDELAY_(p *Periph) mmio.RM32[DIRECT_CSR] {
	return mmio.RM32[DIRECT_CSR]{R: &p.DIRECT_CSR, Mask: DRXDELAY}
}

type DIRECT_TX uint32

func DATA_(p *Periph) mmio.RM32[DIRECT_TX] { return mmio.RM32[DIRECT_TX]{R: &p.DIRECT_TX, Mask: DATA} }
func IWIDTH_(p *Periph) mmio.RM32[DIRECT_TX] {
	return mmio.RM32[DIRECT_TX]{R: &p.DIRECT_TX, Mask: IWIDTH}
}
func DWIDTH_(p *Periph) mmio.RM32[DIRECT_TX] {
	return mmio.RM32[DIRECT_TX]{R: &p.DIRECT_TX, Mask: DWIDTH}
}
func OE_(p *Periph) mmio.RM32[DIRECT_TX] { return mmio.RM32[DIRECT_TX]{R: &p.DIRECT_TX, Mask: OE} }
func NOPUSH_(p *Periph) mmio.RM32[DIRECT_TX] {
	return mmio.RM32[DIRECT_TX]{R: &p.DIRECT_TX, Mask: NOPUSH}
}

type SM struct {
	_ structs.HostLayout

	TIMING mmio.R32[TIMING]
	RFMT   mmio.R32[FMT]
	RCMD   mmio.R32[CMD]
	WFMT   mmio.R32[FMT]
	WCMD   mmio.R32[CMD]
}

type TIMING uint32

func CLKDIV_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: CLKDIV}
}
func RXDELAY_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: RXDELAY}
}
func MIN_DESELECT_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: MIN_DESELECT}
}
func MAX_SELECT_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: MAX_SELECT}
}
func SELECT_HOLD_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: SELECT_HOLD}
}
func SELECT_SETUP_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: SELECT_SETUP}
}
func PAGEBREAK_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: PAGEBREAK}
}
func COOLDOWN_(p *Periph, i int) mmio.RM32[TIMING] {
	return mmio.RM32[TIMING]{R: &p.M[i].TIMING, Mask: COOLDOWN}
}

type FMT uint32

type CMD uint32

type ATRANS uint32

func BASE_(p *Periph, i int) mmio.RM32[ATRANS] { return mmio.RM32[ATRANS]{R: &p.ATRANS[i], Mask: BASE} }
func SIZE_(p *Periph, i int) mmio.RM32[ATRANS] { return mmio.RM32[ATRANS]{R: &p.ATRANS[i], Mask: SIZE} }
